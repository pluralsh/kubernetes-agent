// Code generated by MockGen. DO NOT EDIT.
// Source: ../../redistool/expiring_hash_api.go
//
// Generated by this command:
//
//	mockgen -typed -source ../../redistool/expiring_hash_api.go -destination expiring_hash_api.go -package mock_redis
//
// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	reflect "reflect"

	redistool "github.com/pluralsh/kuberentes-agent/pkg/tool/redistool"
	gomock "go.uber.org/mock/gomock"
)

// MockExpiringHashApi is a mock of ExpiringHashApi interface.
type MockExpiringHashApi[K1 any, K2 any] struct {
	ctrl     *gomock.Controller
	recorder *MockExpiringHashApiMockRecorder[K1, K2]
}

// MockExpiringHashApiMockRecorder is the mock recorder for MockExpiringHashApi.
type MockExpiringHashApiMockRecorder[K1 any, K2 any] struct {
	mock *MockExpiringHashApi[K1, K2]
}

// NewMockExpiringHashApi creates a new mock instance.
func NewMockExpiringHashApi[K1 any, K2 any](ctrl *gomock.Controller) *MockExpiringHashApi[K1, K2] {
	mock := &MockExpiringHashApi[K1, K2]{ctrl: ctrl}
	mock.recorder = &MockExpiringHashApiMockRecorder[K1, K2]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpiringHashApi[K1, K2]) EXPECT() *MockExpiringHashApiMockRecorder[K1, K2] {
	return m.recorder
}

// Scan mocks base method.
func (m *MockExpiringHashApi[K1, K2]) Scan(ctx context.Context, key K1, cb redistool.ScanCallback) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, key, cb)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockExpiringHashApiMockRecorder[K1, K2]) Scan(ctx, key, cb any) *ExpiringHashApiScanCall[K1, K2] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockExpiringHashApi[K1, K2])(nil).Scan), ctx, key, cb)
	return &ExpiringHashApiScanCall[K1, K2]{Call: call}
}

// ExpiringHashApiScanCall wrap *gomock.Call
type ExpiringHashApiScanCall[K1 any, K2 any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExpiringHashApiScanCall[K1, K2]) Return(arg0 int, arg1 error) *ExpiringHashApiScanCall[K1, K2] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExpiringHashApiScanCall[K1, K2]) Do(f func(context.Context, K1, redistool.ScanCallback) (int, error)) *ExpiringHashApiScanCall[K1, K2] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExpiringHashApiScanCall[K1, K2]) DoAndReturn(f func(context.Context, K1, redistool.ScanCallback) (int, error)) *ExpiringHashApiScanCall[K1, K2] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetBuilder mocks base method.
func (m *MockExpiringHashApi[K1, K2]) SetBuilder() redistool.SetBuilder[K1, K2] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBuilder")
	ret0, _ := ret[0].(redistool.SetBuilder[K1, K2])
	return ret0
}

// SetBuilder indicates an expected call of SetBuilder.
func (mr *MockExpiringHashApiMockRecorder[K1, K2]) SetBuilder() *ExpiringHashApiSetBuilderCall[K1, K2] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuilder", reflect.TypeOf((*MockExpiringHashApi[K1, K2])(nil).SetBuilder))
	return &ExpiringHashApiSetBuilderCall[K1, K2]{Call: call}
}

// ExpiringHashApiSetBuilderCall wrap *gomock.Call
type ExpiringHashApiSetBuilderCall[K1 any, K2 any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExpiringHashApiSetBuilderCall[K1, K2]) Return(arg0 redistool.SetBuilder[K1, K2]) *ExpiringHashApiSetBuilderCall[K1, K2] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExpiringHashApiSetBuilderCall[K1, K2]) Do(f func() redistool.SetBuilder[K1, K2]) *ExpiringHashApiSetBuilderCall[K1, K2] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExpiringHashApiSetBuilderCall[K1, K2]) DoAndReturn(f func() redistool.SetBuilder[K1, K2]) *ExpiringHashApiSetBuilderCall[K1, K2] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unset mocks base method.
func (m *MockExpiringHashApi[K1, K2]) Unset(ctx context.Context, key K1, hashKey K2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", ctx, key, hashKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MockExpiringHashApiMockRecorder[K1, K2]) Unset(ctx, key, hashKey any) *ExpiringHashApiUnsetCall[K1, K2] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockExpiringHashApi[K1, K2])(nil).Unset), ctx, key, hashKey)
	return &ExpiringHashApiUnsetCall[K1, K2]{Call: call}
}

// ExpiringHashApiUnsetCall wrap *gomock.Call
type ExpiringHashApiUnsetCall[K1 any, K2 any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExpiringHashApiUnsetCall[K1, K2]) Return(arg0 error) *ExpiringHashApiUnsetCall[K1, K2] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExpiringHashApiUnsetCall[K1, K2]) Do(f func(context.Context, K1, K2) error) *ExpiringHashApiUnsetCall[K1, K2] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExpiringHashApiUnsetCall[K1, K2]) DoAndReturn(f func(context.Context, K1, K2) error) *ExpiringHashApiUnsetCall[K1, K2] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

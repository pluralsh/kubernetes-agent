// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kuberentes-agent/internal/tool/grpctool (interfaces: InboundGrpcToOutboundHttpStream,PoolConn,PoolInterface,ServerErrorReporter)
//
// Generated by this command:
//
//	mockgen -typed -destination grpctool.go -package mock_rpc github.com/pluralsh/kuberentes-agent/internal/tool/grpctool InboundGrpcToOutboundHttpStream,PoolConn,PoolInterface,ServerErrorReporter
//
// Package mock_rpc is a generated GoMock package.
package mock_rpc

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	grpctool2 "github.com/pluralsh/kuberentes-agent/pkg/tool/grpctool"
)

// MockInboundGrpcToOutboundHttpStream is a mock of InboundGrpcToOutboundHttpStream interface.
type MockInboundGrpcToOutboundHttpStream struct {
	ctrl     *gomock.Controller
	recorder *MockInboundGrpcToOutboundHttpStreamMockRecorder
}

// MockInboundGrpcToOutboundHttpStreamMockRecorder is the mock recorder for MockInboundGrpcToOutboundHttpStream.
type MockInboundGrpcToOutboundHttpStreamMockRecorder struct {
	mock *MockInboundGrpcToOutboundHttpStream
}

// NewMockInboundGrpcToOutboundHttpStream creates a new mock instance.
func NewMockInboundGrpcToOutboundHttpStream(ctrl *gomock.Controller) *MockInboundGrpcToOutboundHttpStream {
	mock := &MockInboundGrpcToOutboundHttpStream{ctrl: ctrl}
	mock.recorder = &MockInboundGrpcToOutboundHttpStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInboundGrpcToOutboundHttpStream) EXPECT() *MockInboundGrpcToOutboundHttpStreamMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) Context() *InboundGrpcToOutboundHttpStreamContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).Context))
	return &InboundGrpcToOutboundHttpStreamContextCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamContextCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamContextCall) Return(arg0 context.Context) *InboundGrpcToOutboundHttpStreamContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamContextCall) Do(f func() context.Context) *InboundGrpcToOutboundHttpStreamContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamContextCall) DoAndReturn(f func() context.Context) *InboundGrpcToOutboundHttpStreamContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) RecvMsg(arg0 any) *InboundGrpcToOutboundHttpStreamRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).RecvMsg), arg0)
	return &InboundGrpcToOutboundHttpStreamRecvMsgCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamRecvMsgCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamRecvMsgCall) Return(arg0 error) *InboundGrpcToOutboundHttpStreamRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamRecvMsgCall) Do(f func(any) error) *InboundGrpcToOutboundHttpStreamRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamRecvMsgCall) DoAndReturn(f func(any) error) *InboundGrpcToOutboundHttpStreamRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) Send(arg0 *grpctool2.HttpResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) Send(arg0 any) *InboundGrpcToOutboundHttpStreamSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).Send), arg0)
	return &InboundGrpcToOutboundHttpStreamSendCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamSendCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamSendCall) Return(arg0 error) *InboundGrpcToOutboundHttpStreamSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamSendCall) Do(f func(*grpctool2.HttpResponse) error) *InboundGrpcToOutboundHttpStreamSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamSendCall) DoAndReturn(f func(*grpctool2.HttpResponse) error) *InboundGrpcToOutboundHttpStreamSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendHeader mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) SendHeader(arg0 any) *InboundGrpcToOutboundHttpStreamSendHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).SendHeader), arg0)
	return &InboundGrpcToOutboundHttpStreamSendHeaderCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamSendHeaderCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamSendHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamSendHeaderCall) Return(arg0 error) *InboundGrpcToOutboundHttpStreamSendHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamSendHeaderCall) Do(f func(metadata.MD) error) *InboundGrpcToOutboundHttpStreamSendHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamSendHeaderCall) DoAndReturn(f func(metadata.MD) error) *InboundGrpcToOutboundHttpStreamSendHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) SendMsg(arg0 any) *InboundGrpcToOutboundHttpStreamSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).SendMsg), arg0)
	return &InboundGrpcToOutboundHttpStreamSendMsgCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamSendMsgCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamSendMsgCall) Return(arg0 error) *InboundGrpcToOutboundHttpStreamSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamSendMsgCall) Do(f func(any) error) *InboundGrpcToOutboundHttpStreamSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamSendMsgCall) DoAndReturn(f func(any) error) *InboundGrpcToOutboundHttpStreamSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHeader mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) SetHeader(arg0 any) *InboundGrpcToOutboundHttpStreamSetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).SetHeader), arg0)
	return &InboundGrpcToOutboundHttpStreamSetHeaderCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamSetHeaderCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamSetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamSetHeaderCall) Return(arg0 error) *InboundGrpcToOutboundHttpStreamSetHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamSetHeaderCall) Do(f func(metadata.MD) error) *InboundGrpcToOutboundHttpStreamSetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamSetHeaderCall) DoAndReturn(f func(metadata.MD) error) *InboundGrpcToOutboundHttpStreamSetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTrailer mocks base method.
func (m *MockInboundGrpcToOutboundHttpStream) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockInboundGrpcToOutboundHttpStreamMockRecorder) SetTrailer(arg0 any) *InboundGrpcToOutboundHttpStreamSetTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockInboundGrpcToOutboundHttpStream)(nil).SetTrailer), arg0)
	return &InboundGrpcToOutboundHttpStreamSetTrailerCall{Call: call}
}

// InboundGrpcToOutboundHttpStreamSetTrailerCall wrap *gomock.Call
type InboundGrpcToOutboundHttpStreamSetTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *InboundGrpcToOutboundHttpStreamSetTrailerCall) Return() *InboundGrpcToOutboundHttpStreamSetTrailerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *InboundGrpcToOutboundHttpStreamSetTrailerCall) Do(f func(metadata.MD)) *InboundGrpcToOutboundHttpStreamSetTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *InboundGrpcToOutboundHttpStreamSetTrailerCall) DoAndReturn(f func(metadata.MD)) *InboundGrpcToOutboundHttpStreamSetTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPoolConn is a mock of PoolConn interface.
type MockPoolConn struct {
	ctrl     *gomock.Controller
	recorder *MockPoolConnMockRecorder
}

// MockPoolConnMockRecorder is the mock recorder for MockPoolConn.
type MockPoolConnMockRecorder struct {
	mock *MockPoolConn
}

// NewMockPoolConn creates a new mock instance.
func NewMockPoolConn(ctrl *gomock.Controller) *MockPoolConn {
	mock := &MockPoolConn{ctrl: ctrl}
	mock.recorder = &MockPoolConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolConn) EXPECT() *MockPoolConnMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockPoolConn) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done.
func (mr *MockPoolConnMockRecorder) Done() *PoolConnDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockPoolConn)(nil).Done))
	return &PoolConnDoneCall{Call: call}
}

// PoolConnDoneCall wrap *gomock.Call
type PoolConnDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolConnDoneCall) Return() *PoolConnDoneCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolConnDoneCall) Do(f func()) *PoolConnDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolConnDoneCall) DoAndReturn(f func()) *PoolConnDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Invoke mocks base method.
func (m *MockPoolConn) Invoke(arg0 context.Context, arg1 string, arg2, arg3 any, arg4 ...grpc.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockPoolConnMockRecorder) Invoke(arg0, arg1, arg2, arg3 any, arg4 ...any) *PoolConnInvokeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockPoolConn)(nil).Invoke), varargs...)
	return &PoolConnInvokeCall{Call: call}
}

// PoolConnInvokeCall wrap *gomock.Call
type PoolConnInvokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolConnInvokeCall) Return(arg0 error) *PoolConnInvokeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolConnInvokeCall) Do(f func(context.Context, string, any, any, ...grpc.CallOption) error) *PoolConnInvokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolConnInvokeCall) DoAndReturn(f func(context.Context, string, any, any, ...grpc.CallOption) error) *PoolConnInvokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewStream mocks base method.
func (m *MockPoolConn) NewStream(arg0 context.Context, arg1 *grpc.StreamDesc, arg2 string, arg3 ...grpc.CallOption) (grpc.ClientStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStream", varargs...)
	ret0, _ := ret[0].(grpc.ClientStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream.
func (mr *MockPoolConnMockRecorder) NewStream(arg0, arg1, arg2 any, arg3 ...any) *PoolConnNewStreamCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockPoolConn)(nil).NewStream), varargs...)
	return &PoolConnNewStreamCall{Call: call}
}

// PoolConnNewStreamCall wrap *gomock.Call
type PoolConnNewStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolConnNewStreamCall) Return(arg0 grpc.ClientStream, arg1 error) *PoolConnNewStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolConnNewStreamCall) Do(f func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error)) *PoolConnNewStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolConnNewStreamCall) DoAndReturn(f func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error)) *PoolConnNewStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPoolInterface is a mock of PoolInterface interface.
type MockPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPoolInterfaceMockRecorder
}

// MockPoolInterfaceMockRecorder is the mock recorder for MockPoolInterface.
type MockPoolInterfaceMockRecorder struct {
	mock *MockPoolInterface
}

// NewMockPoolInterface creates a new mock instance.
func NewMockPoolInterface(ctrl *gomock.Controller) *MockPoolInterface {
	mock := &MockPoolInterface{ctrl: ctrl}
	mock.recorder = &MockPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolInterface) EXPECT() *MockPoolInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPoolInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPoolInterfaceMockRecorder) Close() *PoolInterfaceCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoolInterface)(nil).Close))
	return &PoolInterfaceCloseCall{Call: call}
}

// PoolInterfaceCloseCall wrap *gomock.Call
type PoolInterfaceCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolInterfaceCloseCall) Return(arg0 error) *PoolInterfaceCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolInterfaceCloseCall) Do(f func() error) *PoolInterfaceCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolInterfaceCloseCall) DoAndReturn(f func() error) *PoolInterfaceCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Dial mocks base method.
func (m *MockPoolInterface) Dial(arg0 context.Context, arg1 string) (grpctool2.PoolConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", arg0, arg1)
	ret0, _ := ret[0].(grpctool2.PoolConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockPoolInterfaceMockRecorder) Dial(arg0, arg1 any) *PoolInterfaceDialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockPoolInterface)(nil).Dial), arg0, arg1)
	return &PoolInterfaceDialCall{Call: call}
}

// PoolInterfaceDialCall wrap *gomock.Call
type PoolInterfaceDialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolInterfaceDialCall) Return(arg0 grpctool2.PoolConn, arg1 error) *PoolInterfaceDialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolInterfaceDialCall) Do(f func(context.Context, string) (grpctool2.PoolConn, error)) *PoolInterfaceDialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolInterfaceDialCall) DoAndReturn(f func(context.Context, string) (grpctool2.PoolConn, error)) *PoolInterfaceDialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServerErrorReporter is a mock of ServerErrorReporter interface.
type MockServerErrorReporter struct {
	ctrl     *gomock.Controller
	recorder *MockServerErrorReporterMockRecorder
}

// MockServerErrorReporterMockRecorder is the mock recorder for MockServerErrorReporter.
type MockServerErrorReporterMockRecorder struct {
	mock *MockServerErrorReporter
}

// NewMockServerErrorReporter creates a new mock instance.
func NewMockServerErrorReporter(ctrl *gomock.Controller) *MockServerErrorReporter {
	mock := &MockServerErrorReporter{ctrl: ctrl}
	mock.recorder = &MockServerErrorReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerErrorReporter) EXPECT() *MockServerErrorReporterMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockServerErrorReporter) Report(arg0 context.Context, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report", arg0, arg1, arg2)
}

// Report indicates an expected call of Report.
func (mr *MockServerErrorReporterMockRecorder) Report(arg0, arg1, arg2 any) *ServerErrorReporterReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockServerErrorReporter)(nil).Report), arg0, arg1, arg2)
	return &ServerErrorReporterReportCall{Call: call}
}

// ServerErrorReporterReportCall wrap *gomock.Call
type ServerErrorReporterReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServerErrorReporterReportCall) Return() *ServerErrorReporterReportCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServerErrorReporterReportCall) Do(f func(context.Context, string, error)) *ServerErrorReporterReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServerErrorReporterReportCall) DoAndReturn(f func(context.Context, string, error)) *ServerErrorReporterReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/core/v1 (interfaces: CoreV1Interface,SecretInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination core_v1.go -package mock_k8s k8s.io/client-go/kubernetes/typed/core/v1 CoreV1Interface,SecretInterface
//
// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/core/v1"
	v12 "k8s.io/client-go/kubernetes/typed/core/v1"
	rest "k8s.io/client-go/rest"
)

// MockCoreV1Interface is a mock of CoreV1Interface interface.
type MockCoreV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockCoreV1InterfaceMockRecorder
}

// MockCoreV1InterfaceMockRecorder is the mock recorder for MockCoreV1Interface.
type MockCoreV1InterfaceMockRecorder struct {
	mock *MockCoreV1Interface
}

// NewMockCoreV1Interface creates a new mock instance.
func NewMockCoreV1Interface(ctrl *gomock.Controller) *MockCoreV1Interface {
	mock := &MockCoreV1Interface{ctrl: ctrl}
	mock.recorder = &MockCoreV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreV1Interface) EXPECT() *MockCoreV1InterfaceMockRecorder {
	return m.recorder
}

// ComponentStatuses mocks base method.
func (m *MockCoreV1Interface) ComponentStatuses() v12.ComponentStatusInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentStatuses")
	ret0, _ := ret[0].(v12.ComponentStatusInterface)
	return ret0
}

// ComponentStatuses indicates an expected call of ComponentStatuses.
func (mr *MockCoreV1InterfaceMockRecorder) ComponentStatuses() *CoreV1InterfaceComponentStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentStatuses", reflect.TypeOf((*MockCoreV1Interface)(nil).ComponentStatuses))
	return &CoreV1InterfaceComponentStatusesCall{Call: call}
}

// CoreV1InterfaceComponentStatusesCall wrap *gomock.Call
type CoreV1InterfaceComponentStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceComponentStatusesCall) Return(arg0 v12.ComponentStatusInterface) *CoreV1InterfaceComponentStatusesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceComponentStatusesCall) Do(f func() v12.ComponentStatusInterface) *CoreV1InterfaceComponentStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceComponentStatusesCall) DoAndReturn(f func() v12.ComponentStatusInterface) *CoreV1InterfaceComponentStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigMaps mocks base method.
func (m *MockCoreV1Interface) ConfigMaps(arg0 string) v12.ConfigMapInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps", arg0)
	ret0, _ := ret[0].(v12.ConfigMapInterface)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps.
func (mr *MockCoreV1InterfaceMockRecorder) ConfigMaps(arg0 any) *CoreV1InterfaceConfigMapsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockCoreV1Interface)(nil).ConfigMaps), arg0)
	return &CoreV1InterfaceConfigMapsCall{Call: call}
}

// CoreV1InterfaceConfigMapsCall wrap *gomock.Call
type CoreV1InterfaceConfigMapsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceConfigMapsCall) Return(arg0 v12.ConfigMapInterface) *CoreV1InterfaceConfigMapsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceConfigMapsCall) Do(f func(string) v12.ConfigMapInterface) *CoreV1InterfaceConfigMapsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceConfigMapsCall) DoAndReturn(f func(string) v12.ConfigMapInterface) *CoreV1InterfaceConfigMapsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Endpoints mocks base method.
func (m *MockCoreV1Interface) Endpoints(arg0 string) v12.EndpointsInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", arg0)
	ret0, _ := ret[0].(v12.EndpointsInterface)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockCoreV1InterfaceMockRecorder) Endpoints(arg0 any) *CoreV1InterfaceEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockCoreV1Interface)(nil).Endpoints), arg0)
	return &CoreV1InterfaceEndpointsCall{Call: call}
}

// CoreV1InterfaceEndpointsCall wrap *gomock.Call
type CoreV1InterfaceEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceEndpointsCall) Return(arg0 v12.EndpointsInterface) *CoreV1InterfaceEndpointsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceEndpointsCall) Do(f func(string) v12.EndpointsInterface) *CoreV1InterfaceEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceEndpointsCall) DoAndReturn(f func(string) v12.EndpointsInterface) *CoreV1InterfaceEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Events mocks base method.
func (m *MockCoreV1Interface) Events(arg0 string) v12.EventInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", arg0)
	ret0, _ := ret[0].(v12.EventInterface)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockCoreV1InterfaceMockRecorder) Events(arg0 any) *CoreV1InterfaceEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockCoreV1Interface)(nil).Events), arg0)
	return &CoreV1InterfaceEventsCall{Call: call}
}

// CoreV1InterfaceEventsCall wrap *gomock.Call
type CoreV1InterfaceEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceEventsCall) Return(arg0 v12.EventInterface) *CoreV1InterfaceEventsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceEventsCall) Do(f func(string) v12.EventInterface) *CoreV1InterfaceEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceEventsCall) DoAndReturn(f func(string) v12.EventInterface) *CoreV1InterfaceEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LimitRanges mocks base method.
func (m *MockCoreV1Interface) LimitRanges(arg0 string) v12.LimitRangeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitRanges", arg0)
	ret0, _ := ret[0].(v12.LimitRangeInterface)
	return ret0
}

// LimitRanges indicates an expected call of LimitRanges.
func (mr *MockCoreV1InterfaceMockRecorder) LimitRanges(arg0 any) *CoreV1InterfaceLimitRangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitRanges", reflect.TypeOf((*MockCoreV1Interface)(nil).LimitRanges), arg0)
	return &CoreV1InterfaceLimitRangesCall{Call: call}
}

// CoreV1InterfaceLimitRangesCall wrap *gomock.Call
type CoreV1InterfaceLimitRangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceLimitRangesCall) Return(arg0 v12.LimitRangeInterface) *CoreV1InterfaceLimitRangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceLimitRangesCall) Do(f func(string) v12.LimitRangeInterface) *CoreV1InterfaceLimitRangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceLimitRangesCall) DoAndReturn(f func(string) v12.LimitRangeInterface) *CoreV1InterfaceLimitRangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespaces mocks base method.
func (m *MockCoreV1Interface) Namespaces() v12.NamespaceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].(v12.NamespaceInterface)
	return ret0
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockCoreV1InterfaceMockRecorder) Namespaces() *CoreV1InterfaceNamespacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockCoreV1Interface)(nil).Namespaces))
	return &CoreV1InterfaceNamespacesCall{Call: call}
}

// CoreV1InterfaceNamespacesCall wrap *gomock.Call
type CoreV1InterfaceNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceNamespacesCall) Return(arg0 v12.NamespaceInterface) *CoreV1InterfaceNamespacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceNamespacesCall) Do(f func() v12.NamespaceInterface) *CoreV1InterfaceNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceNamespacesCall) DoAndReturn(f func() v12.NamespaceInterface) *CoreV1InterfaceNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nodes mocks base method.
func (m *MockCoreV1Interface) Nodes() v12.NodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(v12.NodeInterface)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockCoreV1InterfaceMockRecorder) Nodes() *CoreV1InterfaceNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockCoreV1Interface)(nil).Nodes))
	return &CoreV1InterfaceNodesCall{Call: call}
}

// CoreV1InterfaceNodesCall wrap *gomock.Call
type CoreV1InterfaceNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceNodesCall) Return(arg0 v12.NodeInterface) *CoreV1InterfaceNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceNodesCall) Do(f func() v12.NodeInterface) *CoreV1InterfaceNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceNodesCall) DoAndReturn(f func() v12.NodeInterface) *CoreV1InterfaceNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PersistentVolumeClaims mocks base method.
func (m *MockCoreV1Interface) PersistentVolumeClaims(arg0 string) v12.PersistentVolumeClaimInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeClaims", arg0)
	ret0, _ := ret[0].(v12.PersistentVolumeClaimInterface)
	return ret0
}

// PersistentVolumeClaims indicates an expected call of PersistentVolumeClaims.
func (mr *MockCoreV1InterfaceMockRecorder) PersistentVolumeClaims(arg0 any) *CoreV1InterfacePersistentVolumeClaimsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeClaims", reflect.TypeOf((*MockCoreV1Interface)(nil).PersistentVolumeClaims), arg0)
	return &CoreV1InterfacePersistentVolumeClaimsCall{Call: call}
}

// CoreV1InterfacePersistentVolumeClaimsCall wrap *gomock.Call
type CoreV1InterfacePersistentVolumeClaimsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfacePersistentVolumeClaimsCall) Return(arg0 v12.PersistentVolumeClaimInterface) *CoreV1InterfacePersistentVolumeClaimsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfacePersistentVolumeClaimsCall) Do(f func(string) v12.PersistentVolumeClaimInterface) *CoreV1InterfacePersistentVolumeClaimsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfacePersistentVolumeClaimsCall) DoAndReturn(f func(string) v12.PersistentVolumeClaimInterface) *CoreV1InterfacePersistentVolumeClaimsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PersistentVolumes mocks base method.
func (m *MockCoreV1Interface) PersistentVolumes() v12.PersistentVolumeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumes")
	ret0, _ := ret[0].(v12.PersistentVolumeInterface)
	return ret0
}

// PersistentVolumes indicates an expected call of PersistentVolumes.
func (mr *MockCoreV1InterfaceMockRecorder) PersistentVolumes() *CoreV1InterfacePersistentVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumes", reflect.TypeOf((*MockCoreV1Interface)(nil).PersistentVolumes))
	return &CoreV1InterfacePersistentVolumesCall{Call: call}
}

// CoreV1InterfacePersistentVolumesCall wrap *gomock.Call
type CoreV1InterfacePersistentVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfacePersistentVolumesCall) Return(arg0 v12.PersistentVolumeInterface) *CoreV1InterfacePersistentVolumesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfacePersistentVolumesCall) Do(f func() v12.PersistentVolumeInterface) *CoreV1InterfacePersistentVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfacePersistentVolumesCall) DoAndReturn(f func() v12.PersistentVolumeInterface) *CoreV1InterfacePersistentVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PodTemplates mocks base method.
func (m *MockCoreV1Interface) PodTemplates(arg0 string) v12.PodTemplateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodTemplates", arg0)
	ret0, _ := ret[0].(v12.PodTemplateInterface)
	return ret0
}

// PodTemplates indicates an expected call of PodTemplates.
func (mr *MockCoreV1InterfaceMockRecorder) PodTemplates(arg0 any) *CoreV1InterfacePodTemplatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodTemplates", reflect.TypeOf((*MockCoreV1Interface)(nil).PodTemplates), arg0)
	return &CoreV1InterfacePodTemplatesCall{Call: call}
}

// CoreV1InterfacePodTemplatesCall wrap *gomock.Call
type CoreV1InterfacePodTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfacePodTemplatesCall) Return(arg0 v12.PodTemplateInterface) *CoreV1InterfacePodTemplatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfacePodTemplatesCall) Do(f func(string) v12.PodTemplateInterface) *CoreV1InterfacePodTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfacePodTemplatesCall) DoAndReturn(f func(string) v12.PodTemplateInterface) *CoreV1InterfacePodTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pods mocks base method.
func (m *MockCoreV1Interface) Pods(arg0 string) v12.PodInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", arg0)
	ret0, _ := ret[0].(v12.PodInterface)
	return ret0
}

// Pods indicates an expected call of Pods.
func (mr *MockCoreV1InterfaceMockRecorder) Pods(arg0 any) *CoreV1InterfacePodsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockCoreV1Interface)(nil).Pods), arg0)
	return &CoreV1InterfacePodsCall{Call: call}
}

// CoreV1InterfacePodsCall wrap *gomock.Call
type CoreV1InterfacePodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfacePodsCall) Return(arg0 v12.PodInterface) *CoreV1InterfacePodsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfacePodsCall) Do(f func(string) v12.PodInterface) *CoreV1InterfacePodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfacePodsCall) DoAndReturn(f func(string) v12.PodInterface) *CoreV1InterfacePodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTClient mocks base method.
func (m *MockCoreV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockCoreV1InterfaceMockRecorder) RESTClient() *CoreV1InterfaceRESTClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockCoreV1Interface)(nil).RESTClient))
	return &CoreV1InterfaceRESTClientCall{Call: call}
}

// CoreV1InterfaceRESTClientCall wrap *gomock.Call
type CoreV1InterfaceRESTClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceRESTClientCall) Return(arg0 rest.Interface) *CoreV1InterfaceRESTClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceRESTClientCall) Do(f func() rest.Interface) *CoreV1InterfaceRESTClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceRESTClientCall) DoAndReturn(f func() rest.Interface) *CoreV1InterfaceRESTClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplicationControllers mocks base method.
func (m *MockCoreV1Interface) ReplicationControllers(arg0 string) v12.ReplicationControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationControllers", arg0)
	ret0, _ := ret[0].(v12.ReplicationControllerInterface)
	return ret0
}

// ReplicationControllers indicates an expected call of ReplicationControllers.
func (mr *MockCoreV1InterfaceMockRecorder) ReplicationControllers(arg0 any) *CoreV1InterfaceReplicationControllersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationControllers", reflect.TypeOf((*MockCoreV1Interface)(nil).ReplicationControllers), arg0)
	return &CoreV1InterfaceReplicationControllersCall{Call: call}
}

// CoreV1InterfaceReplicationControllersCall wrap *gomock.Call
type CoreV1InterfaceReplicationControllersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceReplicationControllersCall) Return(arg0 v12.ReplicationControllerInterface) *CoreV1InterfaceReplicationControllersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceReplicationControllersCall) Do(f func(string) v12.ReplicationControllerInterface) *CoreV1InterfaceReplicationControllersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceReplicationControllersCall) DoAndReturn(f func(string) v12.ReplicationControllerInterface) *CoreV1InterfaceReplicationControllersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourceQuotas mocks base method.
func (m *MockCoreV1Interface) ResourceQuotas(arg0 string) v12.ResourceQuotaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceQuotas", arg0)
	ret0, _ := ret[0].(v12.ResourceQuotaInterface)
	return ret0
}

// ResourceQuotas indicates an expected call of ResourceQuotas.
func (mr *MockCoreV1InterfaceMockRecorder) ResourceQuotas(arg0 any) *CoreV1InterfaceResourceQuotasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceQuotas", reflect.TypeOf((*MockCoreV1Interface)(nil).ResourceQuotas), arg0)
	return &CoreV1InterfaceResourceQuotasCall{Call: call}
}

// CoreV1InterfaceResourceQuotasCall wrap *gomock.Call
type CoreV1InterfaceResourceQuotasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceResourceQuotasCall) Return(arg0 v12.ResourceQuotaInterface) *CoreV1InterfaceResourceQuotasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceResourceQuotasCall) Do(f func(string) v12.ResourceQuotaInterface) *CoreV1InterfaceResourceQuotasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceResourceQuotasCall) DoAndReturn(f func(string) v12.ResourceQuotaInterface) *CoreV1InterfaceResourceQuotasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Secrets mocks base method.
func (m *MockCoreV1Interface) Secrets(arg0 string) v12.SecretInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", arg0)
	ret0, _ := ret[0].(v12.SecretInterface)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockCoreV1InterfaceMockRecorder) Secrets(arg0 any) *CoreV1InterfaceSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockCoreV1Interface)(nil).Secrets), arg0)
	return &CoreV1InterfaceSecretsCall{Call: call}
}

// CoreV1InterfaceSecretsCall wrap *gomock.Call
type CoreV1InterfaceSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceSecretsCall) Return(arg0 v12.SecretInterface) *CoreV1InterfaceSecretsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceSecretsCall) Do(f func(string) v12.SecretInterface) *CoreV1InterfaceSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceSecretsCall) DoAndReturn(f func(string) v12.SecretInterface) *CoreV1InterfaceSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServiceAccounts mocks base method.
func (m *MockCoreV1Interface) ServiceAccounts(arg0 string) v12.ServiceAccountInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", arg0)
	ret0, _ := ret[0].(v12.ServiceAccountInterface)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockCoreV1InterfaceMockRecorder) ServiceAccounts(arg0 any) *CoreV1InterfaceServiceAccountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockCoreV1Interface)(nil).ServiceAccounts), arg0)
	return &CoreV1InterfaceServiceAccountsCall{Call: call}
}

// CoreV1InterfaceServiceAccountsCall wrap *gomock.Call
type CoreV1InterfaceServiceAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceServiceAccountsCall) Return(arg0 v12.ServiceAccountInterface) *CoreV1InterfaceServiceAccountsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceServiceAccountsCall) Do(f func(string) v12.ServiceAccountInterface) *CoreV1InterfaceServiceAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceServiceAccountsCall) DoAndReturn(f func(string) v12.ServiceAccountInterface) *CoreV1InterfaceServiceAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Services mocks base method.
func (m *MockCoreV1Interface) Services(arg0 string) v12.ServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", arg0)
	ret0, _ := ret[0].(v12.ServiceInterface)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockCoreV1InterfaceMockRecorder) Services(arg0 any) *CoreV1InterfaceServicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockCoreV1Interface)(nil).Services), arg0)
	return &CoreV1InterfaceServicesCall{Call: call}
}

// CoreV1InterfaceServicesCall wrap *gomock.Call
type CoreV1InterfaceServicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CoreV1InterfaceServicesCall) Return(arg0 v12.ServiceInterface) *CoreV1InterfaceServicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CoreV1InterfaceServicesCall) Do(f func(string) v12.ServiceInterface) *CoreV1InterfaceServicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CoreV1InterfaceServicesCall) DoAndReturn(f func(string) v12.ServiceInterface) *CoreV1InterfaceServicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretInterface is a mock of SecretInterface interface.
type MockSecretInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecretInterfaceMockRecorder
}

// MockSecretInterfaceMockRecorder is the mock recorder for MockSecretInterface.
type MockSecretInterfaceMockRecorder struct {
	mock *MockSecretInterface
}

// NewMockSecretInterface creates a new mock instance.
func NewMockSecretInterface(ctrl *gomock.Controller) *MockSecretInterface {
	mock := &MockSecretInterface{ctrl: ctrl}
	mock.recorder = &MockSecretInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretInterface) EXPECT() *MockSecretInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockSecretInterface) Apply(arg0 context.Context, arg1 *v11.SecretApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockSecretInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *SecretInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockSecretInterface)(nil).Apply), arg0, arg1, arg2)
	return &SecretInterfaceApplyCall{Call: call}
}

// SecretInterfaceApplyCall wrap *gomock.Call
type SecretInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceApplyCall) Return(arg0 *v1.Secret, arg1 error) *SecretInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceApplyCall) Do(f func(context.Context, *v11.SecretApplyConfiguration, v10.ApplyOptions) (*v1.Secret, error)) *SecretInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.SecretApplyConfiguration, v10.ApplyOptions) (*v1.Secret, error)) *SecretInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockSecretInterface) Create(arg0 context.Context, arg1 *v1.Secret, arg2 v10.CreateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *SecretInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretInterface)(nil).Create), arg0, arg1, arg2)
	return &SecretInterfaceCreateCall{Call: call}
}

// SecretInterfaceCreateCall wrap *gomock.Call
type SecretInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceCreateCall) Return(arg0 *v1.Secret, arg1 error) *SecretInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceCreateCall) Do(f func(context.Context, *v1.Secret, v10.CreateOptions) (*v1.Secret, error)) *SecretInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Secret, v10.CreateOptions) (*v1.Secret, error)) *SecretInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSecretInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *SecretInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretInterface)(nil).Delete), arg0, arg1, arg2)
	return &SecretInterfaceDeleteCall{Call: call}
}

// SecretInterfaceDeleteCall wrap *gomock.Call
type SecretInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceDeleteCall) Return(arg0 error) *SecretInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *SecretInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *SecretInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockSecretInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockSecretInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *SecretInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockSecretInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &SecretInterfaceDeleteCollectionCall{Call: call}
}

// SecretInterfaceDeleteCollectionCall wrap *gomock.Call
type SecretInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceDeleteCollectionCall) Return(arg0 error) *SecretInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *SecretInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *SecretInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSecretInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *SecretInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretInterface)(nil).Get), arg0, arg1, arg2)
	return &SecretInterfaceGetCall{Call: call}
}

// SecretInterfaceGetCall wrap *gomock.Call
type SecretInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceGetCall) Return(arg0 *v1.Secret, arg1 error) *SecretInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.Secret, error)) *SecretInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.Secret, error)) *SecretInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSecretInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretInterfaceMockRecorder) List(arg0, arg1 any) *SecretInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretInterface)(nil).List), arg0, arg1)
	return &SecretInterfaceListCall{Call: call}
}

// SecretInterfaceListCall wrap *gomock.Call
type SecretInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceListCall) Return(arg0 *v1.SecretList, arg1 error) *SecretInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.SecretList, error)) *SecretInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.SecretList, error)) *SecretInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockSecretInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockSecretInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *SecretInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockSecretInterface)(nil).Patch), varargs...)
	return &SecretInterfacePatchCall{Call: call}
}

// SecretInterfacePatchCall wrap *gomock.Call
type SecretInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfacePatchCall) Return(arg0 *v1.Secret, arg1 error) *SecretInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Secret, error)) *SecretInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Secret, error)) *SecretInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockSecretInterface) Update(arg0 context.Context, arg1 *v1.Secret, arg2 v10.UpdateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecretInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *SecretInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretInterface)(nil).Update), arg0, arg1, arg2)
	return &SecretInterfaceUpdateCall{Call: call}
}

// SecretInterfaceUpdateCall wrap *gomock.Call
type SecretInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceUpdateCall) Return(arg0 *v1.Secret, arg1 error) *SecretInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceUpdateCall) Do(f func(context.Context, *v1.Secret, v10.UpdateOptions) (*v1.Secret, error)) *SecretInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Secret, v10.UpdateOptions) (*v1.Secret, error)) *SecretInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockSecretInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockSecretInterfaceMockRecorder) Watch(arg0, arg1 any) *SecretInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSecretInterface)(nil).Watch), arg0, arg1)
	return &SecretInterfaceWatchCall{Call: call}
}

// SecretInterfaceWatchCall wrap *gomock.Call
type SecretInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SecretInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *SecretInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SecretInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *SecretInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SecretInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *SecretInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

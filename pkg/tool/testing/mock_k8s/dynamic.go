// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/dynamic (interfaces: NamespaceableResourceInterface,ResourceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination dynamic.go -package mock_k8s k8s.io/client-go/dynamic NamespaceableResourceInterface,ResourceInterface
//
// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	dynamic "k8s.io/client-go/dynamic"
)

// MockNamespaceableResourceInterface is a mock of NamespaceableResourceInterface interface.
type MockNamespaceableResourceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceableResourceInterfaceMockRecorder
}

// MockNamespaceableResourceInterfaceMockRecorder is the mock recorder for MockNamespaceableResourceInterface.
type MockNamespaceableResourceInterfaceMockRecorder struct {
	mock *MockNamespaceableResourceInterface
}

// NewMockNamespaceableResourceInterface creates a new mock instance.
func NewMockNamespaceableResourceInterface(ctrl *gomock.Controller) *MockNamespaceableResourceInterface {
	mock := &MockNamespaceableResourceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespaceableResourceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceableResourceInterface) EXPECT() *MockNamespaceableResourceInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockNamespaceableResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *NamespaceableResourceInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Apply), varargs...)
	return &NamespaceableResourceInterfaceApplyCall{Call: call}
}

// NamespaceableResourceInterfaceApplyCall wrap *gomock.Call
type NamespaceableResourceInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceApplyCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceApplyCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceApplyCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockNamespaceableResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *NamespaceableResourceInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).ApplyStatus), arg0, arg1, arg2, arg3)
	return &NamespaceableResourceInterfaceApplyStatusCall{Call: call}
}

// NamespaceableResourceInterfaceApplyStatusCall wrap *gomock.Call
type NamespaceableResourceInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceApplyStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceApplyStatusCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNamespaceableResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *NamespaceableResourceInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Create), varargs...)
	return &NamespaceableResourceInterfaceCreateCall{Call: call}
}

// NamespaceableResourceInterfaceCreateCall wrap *gomock.Call
type NamespaceableResourceInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceCreateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceCreateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceCreateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockNamespaceableResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *NamespaceableResourceInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Delete), varargs...)
	return &NamespaceableResourceInterfaceDeleteCall{Call: call}
}

// NamespaceableResourceInterfaceDeleteCall wrap *gomock.Call
type NamespaceableResourceInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceDeleteCall) Return(arg0 error) *NamespaceableResourceInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceDeleteCall) Do(f func(context.Context, string, v1.DeleteOptions, ...string) error) *NamespaceableResourceInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v1.DeleteOptions, ...string) error) *NamespaceableResourceInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockNamespaceableResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *NamespaceableResourceInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &NamespaceableResourceInterfaceDeleteCollectionCall{Call: call}
}

// NamespaceableResourceInterfaceDeleteCollectionCall wrap *gomock.Call
type NamespaceableResourceInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceDeleteCollectionCall) Return(arg0 error) *NamespaceableResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceDeleteCollectionCall) Do(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *NamespaceableResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *NamespaceableResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockNamespaceableResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *NamespaceableResourceInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Get), varargs...)
	return &NamespaceableResourceInterfaceGetCall{Call: call}
}

// NamespaceableResourceInterfaceGetCall wrap *gomock.Call
type NamespaceableResourceInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceGetCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceGetCall) Do(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceGetCall) DoAndReturn(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockNamespaceableResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) List(arg0, arg1 any) *NamespaceableResourceInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).List), arg0, arg1)
	return &NamespaceableResourceInterfaceListCall{Call: call}
}

// NamespaceableResourceInterfaceListCall wrap *gomock.Call
type NamespaceableResourceInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceListCall) Return(arg0 *unstructured.UnstructuredList, arg1 error) *NamespaceableResourceInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceListCall) Do(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *NamespaceableResourceInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceListCall) DoAndReturn(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *NamespaceableResourceInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespace mocks base method.
func (m *MockNamespaceableResourceInterface) Namespace(arg0 string) dynamic.ResourceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", arg0)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Namespace(arg0 any) *NamespaceableResourceInterfaceNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Namespace), arg0)
	return &NamespaceableResourceInterfaceNamespaceCall{Call: call}
}

// NamespaceableResourceInterfaceNamespaceCall wrap *gomock.Call
type NamespaceableResourceInterfaceNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceNamespaceCall) Return(arg0 dynamic.ResourceInterface) *NamespaceableResourceInterfaceNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceNamespaceCall) Do(f func(string) dynamic.ResourceInterface) *NamespaceableResourceInterfaceNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceNamespaceCall) DoAndReturn(f func(string) dynamic.ResourceInterface) *NamespaceableResourceInterfaceNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockNamespaceableResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *NamespaceableResourceInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Patch), varargs...)
	return &NamespaceableResourceInterfacePatchCall{Call: call}
}

// NamespaceableResourceInterfacePatchCall wrap *gomock.Call
type NamespaceableResourceInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfacePatchCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockNamespaceableResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *NamespaceableResourceInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Update), varargs...)
	return &NamespaceableResourceInterfaceUpdateCall{Call: call}
}

// NamespaceableResourceInterfaceUpdateCall wrap *gomock.Call
type NamespaceableResourceInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceUpdateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceUpdateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceUpdateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockNamespaceableResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *NamespaceableResourceInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &NamespaceableResourceInterfaceUpdateStatusCall{Call: call}
}

// NamespaceableResourceInterfaceUpdateStatusCall wrap *gomock.Call
type NamespaceableResourceInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceUpdateStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *NamespaceableResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceUpdateStatusCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *NamespaceableResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockNamespaceableResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *NamespaceableResourceInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Watch), arg0, arg1)
	return &NamespaceableResourceInterfaceWatchCall{Call: call}
}

// NamespaceableResourceInterfaceWatchCall wrap *gomock.Call
type NamespaceableResourceInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NamespaceableResourceInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *NamespaceableResourceInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NamespaceableResourceInterfaceWatchCall) Do(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *NamespaceableResourceInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NamespaceableResourceInterfaceWatchCall) DoAndReturn(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *NamespaceableResourceInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceInterface is a mock of ResourceInterface interface.
type MockResourceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResourceInterfaceMockRecorder
}

// MockResourceInterfaceMockRecorder is the mock recorder for MockResourceInterface.
type MockResourceInterfaceMockRecorder struct {
	mock *MockResourceInterface
}

// NewMockResourceInterface creates a new mock instance.
func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {
	mock := &MockResourceInterface{ctrl: ctrl}
	mock.recorder = &MockResourceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *ResourceInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockResourceInterface)(nil).Apply), varargs...)
	return &ResourceInterfaceApplyCall{Call: call}
}

// ResourceInterfaceApplyCall wrap *gomock.Call
type ResourceInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceApplyCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceApplyCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceApplyCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *ResourceInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockResourceInterface)(nil).ApplyStatus), arg0, arg1, arg2, arg3)
	return &ResourceInterfaceApplyStatusCall{Call: call}
}

// ResourceInterfaceApplyStatusCall wrap *gomock.Call
type ResourceInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceApplyStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceApplyStatusCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *ResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *ResourceInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *ResourceInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceInterface)(nil).Create), varargs...)
	return &ResourceInterfaceCreateCall{Call: call}
}

// ResourceInterfaceCreateCall wrap *gomock.Call
type ResourceInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceCreateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceCreateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceCreateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *ResourceInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceInterface)(nil).Delete), varargs...)
	return &ResourceInterfaceDeleteCall{Call: call}
}

// ResourceInterfaceDeleteCall wrap *gomock.Call
type ResourceInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceDeleteCall) Return(arg0 error) *ResourceInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceDeleteCall) Do(f func(context.Context, string, v1.DeleteOptions, ...string) error) *ResourceInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v1.DeleteOptions, ...string) error) *ResourceInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *ResourceInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockResourceInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &ResourceInterfaceDeleteCollectionCall{Call: call}
}

// ResourceInterfaceDeleteCollectionCall wrap *gomock.Call
type ResourceInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceDeleteCollectionCall) Return(arg0 error) *ResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceDeleteCollectionCall) Do(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *ResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *ResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *ResourceInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceInterface)(nil).Get), varargs...)
	return &ResourceInterfaceGetCall{Call: call}
}

// ResourceInterfaceGetCall wrap *gomock.Call
type ResourceInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceGetCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceGetCall) Do(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceGetCall) DoAndReturn(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourceInterfaceMockRecorder) List(arg0, arg1 any) *ResourceInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceInterface)(nil).List), arg0, arg1)
	return &ResourceInterfaceListCall{Call: call}
}

// ResourceInterfaceListCall wrap *gomock.Call
type ResourceInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceListCall) Return(arg0 *unstructured.UnstructuredList, arg1 error) *ResourceInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceListCall) Do(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *ResourceInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceListCall) DoAndReturn(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *ResourceInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *ResourceInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockResourceInterface)(nil).Patch), varargs...)
	return &ResourceInterfacePatchCall{Call: call}
}

// ResourceInterfacePatchCall wrap *gomock.Call
type ResourceInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfacePatchCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *ResourceInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceInterface)(nil).Update), varargs...)
	return &ResourceInterfaceUpdateCall{Call: call}
}

// ResourceInterfaceUpdateCall wrap *gomock.Call
type ResourceInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceUpdateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceUpdateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceUpdateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *ResourceInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockResourceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &ResourceInterfaceUpdateStatusCall{Call: call}
}

// ResourceInterfaceUpdateStatusCall wrap *gomock.Call
type ResourceInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceUpdateStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *ResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceUpdateStatusCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *ResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *ResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *ResourceInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockResourceInterface)(nil).Watch), arg0, arg1)
	return &ResourceInterfaceWatchCall{Call: call}
}

// ResourceInterfaceWatchCall wrap *gomock.Call
type ResourceInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResourceInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *ResourceInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResourceInterfaceWatchCall) Do(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *ResourceInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResourceInterfaceWatchCall) DoAndReturn(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *ResourceInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

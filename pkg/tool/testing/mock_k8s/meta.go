// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/apimachinery/pkg/api/meta (interfaces: ResettableRESTMapper)
//
// Generated by this command:
//
//	mockgen -typed -destination meta.go -package mock_k8s k8s.io/apimachinery/pkg/api/meta ResettableRESTMapper
//
// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	meta "k8s.io/apimachinery/pkg/api/meta"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// MockResettableRESTMapper is a mock of ResettableRESTMapper interface.
type MockResettableRESTMapper struct {
	ctrl     *gomock.Controller
	recorder *MockResettableRESTMapperMockRecorder
}

// MockResettableRESTMapperMockRecorder is the mock recorder for MockResettableRESTMapper.
type MockResettableRESTMapperMockRecorder struct {
	mock *MockResettableRESTMapper
}

// NewMockResettableRESTMapper creates a new mock instance.
func NewMockResettableRESTMapper(ctrl *gomock.Controller) *MockResettableRESTMapper {
	mock := &MockResettableRESTMapper{ctrl: ctrl}
	mock.recorder = &MockResettableRESTMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResettableRESTMapper) EXPECT() *MockResettableRESTMapperMockRecorder {
	return m.recorder
}

// KindFor mocks base method.
func (m *MockResettableRESTMapper) KindFor(arg0 schema.GroupVersionResource) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindFor", arg0)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindFor indicates an expected call of KindFor.
func (mr *MockResettableRESTMapperMockRecorder) KindFor(arg0 any) *ResettableRESTMapperKindForCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).KindFor), arg0)
	return &ResettableRESTMapperKindForCall{Call: call}
}

// ResettableRESTMapperKindForCall wrap *gomock.Call
type ResettableRESTMapperKindForCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperKindForCall) Return(arg0 schema.GroupVersionKind, arg1 error) *ResettableRESTMapperKindForCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperKindForCall) Do(f func(schema.GroupVersionResource) (schema.GroupVersionKind, error)) *ResettableRESTMapperKindForCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperKindForCall) DoAndReturn(f func(schema.GroupVersionResource) (schema.GroupVersionKind, error)) *ResettableRESTMapperKindForCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KindsFor mocks base method.
func (m *MockResettableRESTMapper) KindsFor(arg0 schema.GroupVersionResource) ([]schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindsFor", arg0)
	ret0, _ := ret[0].([]schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindsFor indicates an expected call of KindsFor.
func (mr *MockResettableRESTMapperMockRecorder) KindsFor(arg0 any) *ResettableRESTMapperKindsForCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindsFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).KindsFor), arg0)
	return &ResettableRESTMapperKindsForCall{Call: call}
}

// ResettableRESTMapperKindsForCall wrap *gomock.Call
type ResettableRESTMapperKindsForCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperKindsForCall) Return(arg0 []schema.GroupVersionKind, arg1 error) *ResettableRESTMapperKindsForCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperKindsForCall) Do(f func(schema.GroupVersionResource) ([]schema.GroupVersionKind, error)) *ResettableRESTMapperKindsForCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperKindsForCall) DoAndReturn(f func(schema.GroupVersionResource) ([]schema.GroupVersionKind, error)) *ResettableRESTMapperKindsForCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTMapping mocks base method.
func (m *MockResettableRESTMapper) RESTMapping(arg0 schema.GroupKind, arg1 ...string) (*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMapping", varargs...)
	ret0, _ := ret[0].(*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMapping indicates an expected call of RESTMapping.
func (mr *MockResettableRESTMapperMockRecorder) RESTMapping(arg0 any, arg1 ...any) *ResettableRESTMapperRESTMappingCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapping", reflect.TypeOf((*MockResettableRESTMapper)(nil).RESTMapping), varargs...)
	return &ResettableRESTMapperRESTMappingCall{Call: call}
}

// ResettableRESTMapperRESTMappingCall wrap *gomock.Call
type ResettableRESTMapperRESTMappingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperRESTMappingCall) Return(arg0 *meta.RESTMapping, arg1 error) *ResettableRESTMapperRESTMappingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperRESTMappingCall) Do(f func(schema.GroupKind, ...string) (*meta.RESTMapping, error)) *ResettableRESTMapperRESTMappingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperRESTMappingCall) DoAndReturn(f func(schema.GroupKind, ...string) (*meta.RESTMapping, error)) *ResettableRESTMapperRESTMappingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTMappings mocks base method.
func (m *MockResettableRESTMapper) RESTMappings(arg0 schema.GroupKind, arg1 ...string) ([]*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMappings", varargs...)
	ret0, _ := ret[0].([]*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMappings indicates an expected call of RESTMappings.
func (mr *MockResettableRESTMapperMockRecorder) RESTMappings(arg0 any, arg1 ...any) *ResettableRESTMapperRESTMappingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMappings", reflect.TypeOf((*MockResettableRESTMapper)(nil).RESTMappings), varargs...)
	return &ResettableRESTMapperRESTMappingsCall{Call: call}
}

// ResettableRESTMapperRESTMappingsCall wrap *gomock.Call
type ResettableRESTMapperRESTMappingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperRESTMappingsCall) Return(arg0 []*meta.RESTMapping, arg1 error) *ResettableRESTMapperRESTMappingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperRESTMappingsCall) Do(f func(schema.GroupKind, ...string) ([]*meta.RESTMapping, error)) *ResettableRESTMapperRESTMappingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperRESTMappingsCall) DoAndReturn(f func(schema.GroupKind, ...string) ([]*meta.RESTMapping, error)) *ResettableRESTMapperRESTMappingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reset mocks base method.
func (m *MockResettableRESTMapper) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockResettableRESTMapperMockRecorder) Reset() *ResettableRESTMapperResetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResettableRESTMapper)(nil).Reset))
	return &ResettableRESTMapperResetCall{Call: call}
}

// ResettableRESTMapperResetCall wrap *gomock.Call
type ResettableRESTMapperResetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperResetCall) Return() *ResettableRESTMapperResetCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperResetCall) Do(f func()) *ResettableRESTMapperResetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperResetCall) DoAndReturn(f func()) *ResettableRESTMapperResetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourceFor mocks base method.
func (m *MockResettableRESTMapper) ResourceFor(arg0 schema.GroupVersionResource) (schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceFor", arg0)
	ret0, _ := ret[0].(schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceFor indicates an expected call of ResourceFor.
func (mr *MockResettableRESTMapperMockRecorder) ResourceFor(arg0 any) *ResettableRESTMapperResourceForCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).ResourceFor), arg0)
	return &ResettableRESTMapperResourceForCall{Call: call}
}

// ResettableRESTMapperResourceForCall wrap *gomock.Call
type ResettableRESTMapperResourceForCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperResourceForCall) Return(arg0 schema.GroupVersionResource, arg1 error) *ResettableRESTMapperResourceForCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperResourceForCall) Do(f func(schema.GroupVersionResource) (schema.GroupVersionResource, error)) *ResettableRESTMapperResourceForCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperResourceForCall) DoAndReturn(f func(schema.GroupVersionResource) (schema.GroupVersionResource, error)) *ResettableRESTMapperResourceForCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourceSingularizer mocks base method.
func (m *MockResettableRESTMapper) ResourceSingularizer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSingularizer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceSingularizer indicates an expected call of ResourceSingularizer.
func (mr *MockResettableRESTMapperMockRecorder) ResourceSingularizer(arg0 any) *ResettableRESTMapperResourceSingularizerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSingularizer", reflect.TypeOf((*MockResettableRESTMapper)(nil).ResourceSingularizer), arg0)
	return &ResettableRESTMapperResourceSingularizerCall{Call: call}
}

// ResettableRESTMapperResourceSingularizerCall wrap *gomock.Call
type ResettableRESTMapperResourceSingularizerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperResourceSingularizerCall) Return(arg0 string, arg1 error) *ResettableRESTMapperResourceSingularizerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperResourceSingularizerCall) Do(f func(string) (string, error)) *ResettableRESTMapperResourceSingularizerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperResourceSingularizerCall) DoAndReturn(f func(string) (string, error)) *ResettableRESTMapperResourceSingularizerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourcesFor mocks base method.
func (m *MockResettableRESTMapper) ResourcesFor(arg0 schema.GroupVersionResource) ([]schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesFor", arg0)
	ret0, _ := ret[0].([]schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesFor indicates an expected call of ResourcesFor.
func (mr *MockResettableRESTMapperMockRecorder) ResourcesFor(arg0 any) *ResettableRESTMapperResourcesForCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).ResourcesFor), arg0)
	return &ResettableRESTMapperResourcesForCall{Call: call}
}

// ResettableRESTMapperResourcesForCall wrap *gomock.Call
type ResettableRESTMapperResourcesForCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResettableRESTMapperResourcesForCall) Return(arg0 []schema.GroupVersionResource, arg1 error) *ResettableRESTMapperResourcesForCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResettableRESTMapperResourcesForCall) Do(f func(schema.GroupVersionResource) ([]schema.GroupVersionResource, error)) *ResettableRESTMapperResourcesForCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResettableRESTMapperResourcesForCall) DoAndReturn(f func(schema.GroupVersionResource) ([]schema.GroupVersionResource, error)) *ResettableRESTMapperResourcesForCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/util/workqueue (interfaces: RateLimitingInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination workqueue.go -package mock_k8s -mock_names RateLimitingInterface=MockRateLimitingWorkqueue k8s.io/client-go/util/workqueue RateLimitingInterface
//
// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRateLimitingWorkqueue is a mock of RateLimitingInterface interface.
type MockRateLimitingWorkqueue struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitingWorkqueueMockRecorder
}

// MockRateLimitingWorkqueueMockRecorder is the mock recorder for MockRateLimitingWorkqueue.
type MockRateLimitingWorkqueueMockRecorder struct {
	mock *MockRateLimitingWorkqueue
}

// NewMockRateLimitingWorkqueue creates a new mock instance.
func NewMockRateLimitingWorkqueue(ctrl *gomock.Controller) *MockRateLimitingWorkqueue {
	mock := &MockRateLimitingWorkqueue{ctrl: ctrl}
	mock.recorder = &MockRateLimitingWorkqueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitingWorkqueue) EXPECT() *MockRateLimitingWorkqueueMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRateLimitingWorkqueue) Add(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockRateLimitingWorkqueueMockRecorder) Add(arg0 any) *RateLimitingInterfaceAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).Add), arg0)
	return &RateLimitingInterfaceAddCall{Call: call}
}

// RateLimitingInterfaceAddCall wrap *gomock.Call
type RateLimitingInterfaceAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceAddCall) Return() *RateLimitingInterfaceAddCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceAddCall) Do(f func(any)) *RateLimitingInterfaceAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceAddCall) DoAndReturn(f func(any)) *RateLimitingInterfaceAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddAfter mocks base method.
func (m *MockRateLimitingWorkqueue) AddAfter(arg0 any, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAfter", arg0, arg1)
}

// AddAfter indicates an expected call of AddAfter.
func (mr *MockRateLimitingWorkqueueMockRecorder) AddAfter(arg0, arg1 any) *RateLimitingInterfaceAddAfterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAfter", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).AddAfter), arg0, arg1)
	return &RateLimitingInterfaceAddAfterCall{Call: call}
}

// RateLimitingInterfaceAddAfterCall wrap *gomock.Call
type RateLimitingInterfaceAddAfterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceAddAfterCall) Return() *RateLimitingInterfaceAddAfterCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceAddAfterCall) Do(f func(any, time.Duration)) *RateLimitingInterfaceAddAfterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceAddAfterCall) DoAndReturn(f func(any, time.Duration)) *RateLimitingInterfaceAddAfterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRateLimited mocks base method.
func (m *MockRateLimitingWorkqueue) AddRateLimited(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRateLimited", arg0)
}

// AddRateLimited indicates an expected call of AddRateLimited.
func (mr *MockRateLimitingWorkqueueMockRecorder) AddRateLimited(arg0 any) *RateLimitingInterfaceAddRateLimitedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRateLimited", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).AddRateLimited), arg0)
	return &RateLimitingInterfaceAddRateLimitedCall{Call: call}
}

// RateLimitingInterfaceAddRateLimitedCall wrap *gomock.Call
type RateLimitingInterfaceAddRateLimitedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceAddRateLimitedCall) Return() *RateLimitingInterfaceAddRateLimitedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceAddRateLimitedCall) Do(f func(any)) *RateLimitingInterfaceAddRateLimitedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceAddRateLimitedCall) DoAndReturn(f func(any)) *RateLimitingInterfaceAddRateLimitedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockRateLimitingWorkqueue) Done(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0)
}

// Done indicates an expected call of Done.
func (mr *MockRateLimitingWorkqueueMockRecorder) Done(arg0 any) *RateLimitingInterfaceDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).Done), arg0)
	return &RateLimitingInterfaceDoneCall{Call: call}
}

// RateLimitingInterfaceDoneCall wrap *gomock.Call
type RateLimitingInterfaceDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceDoneCall) Return() *RateLimitingInterfaceDoneCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceDoneCall) Do(f func(any)) *RateLimitingInterfaceDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceDoneCall) DoAndReturn(f func(any)) *RateLimitingInterfaceDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Forget mocks base method.
func (m *MockRateLimitingWorkqueue) Forget(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forget", arg0)
}

// Forget indicates an expected call of Forget.
func (mr *MockRateLimitingWorkqueueMockRecorder) Forget(arg0 any) *RateLimitingInterfaceForgetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).Forget), arg0)
	return &RateLimitingInterfaceForgetCall{Call: call}
}

// RateLimitingInterfaceForgetCall wrap *gomock.Call
type RateLimitingInterfaceForgetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceForgetCall) Return() *RateLimitingInterfaceForgetCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceForgetCall) Do(f func(any)) *RateLimitingInterfaceForgetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceForgetCall) DoAndReturn(f func(any)) *RateLimitingInterfaceForgetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRateLimitingWorkqueue) Get() (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRateLimitingWorkqueueMockRecorder) Get() *RateLimitingInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).Get))
	return &RateLimitingInterfaceGetCall{Call: call}
}

// RateLimitingInterfaceGetCall wrap *gomock.Call
type RateLimitingInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceGetCall) Return(arg0 any, arg1 bool) *RateLimitingInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceGetCall) Do(f func() (any, bool)) *RateLimitingInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceGetCall) DoAndReturn(f func() (any, bool)) *RateLimitingInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Len mocks base method.
func (m *MockRateLimitingWorkqueue) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockRateLimitingWorkqueueMockRecorder) Len() *RateLimitingInterfaceLenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).Len))
	return &RateLimitingInterfaceLenCall{Call: call}
}

// RateLimitingInterfaceLenCall wrap *gomock.Call
type RateLimitingInterfaceLenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceLenCall) Return(arg0 int) *RateLimitingInterfaceLenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceLenCall) Do(f func() int) *RateLimitingInterfaceLenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceLenCall) DoAndReturn(f func() int) *RateLimitingInterfaceLenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NumRequeues mocks base method.
func (m *MockRateLimitingWorkqueue) NumRequeues(arg0 any) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumRequeues", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// NumRequeues indicates an expected call of NumRequeues.
func (mr *MockRateLimitingWorkqueueMockRecorder) NumRequeues(arg0 any) *RateLimitingInterfaceNumRequeuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumRequeues", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).NumRequeues), arg0)
	return &RateLimitingInterfaceNumRequeuesCall{Call: call}
}

// RateLimitingInterfaceNumRequeuesCall wrap *gomock.Call
type RateLimitingInterfaceNumRequeuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceNumRequeuesCall) Return(arg0 int) *RateLimitingInterfaceNumRequeuesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceNumRequeuesCall) Do(f func(any) int) *RateLimitingInterfaceNumRequeuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceNumRequeuesCall) DoAndReturn(f func(any) int) *RateLimitingInterfaceNumRequeuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShutDown mocks base method.
func (m *MockRateLimitingWorkqueue) ShutDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutDown")
}

// ShutDown indicates an expected call of ShutDown.
func (mr *MockRateLimitingWorkqueueMockRecorder) ShutDown() *RateLimitingInterfaceShutDownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).ShutDown))
	return &RateLimitingInterfaceShutDownCall{Call: call}
}

// RateLimitingInterfaceShutDownCall wrap *gomock.Call
type RateLimitingInterfaceShutDownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceShutDownCall) Return() *RateLimitingInterfaceShutDownCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceShutDownCall) Do(f func()) *RateLimitingInterfaceShutDownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceShutDownCall) DoAndReturn(f func()) *RateLimitingInterfaceShutDownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShutDownWithDrain mocks base method.
func (m *MockRateLimitingWorkqueue) ShutDownWithDrain() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutDownWithDrain")
}

// ShutDownWithDrain indicates an expected call of ShutDownWithDrain.
func (mr *MockRateLimitingWorkqueueMockRecorder) ShutDownWithDrain() *RateLimitingInterfaceShutDownWithDrainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDownWithDrain", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).ShutDownWithDrain))
	return &RateLimitingInterfaceShutDownWithDrainCall{Call: call}
}

// RateLimitingInterfaceShutDownWithDrainCall wrap *gomock.Call
type RateLimitingInterfaceShutDownWithDrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceShutDownWithDrainCall) Return() *RateLimitingInterfaceShutDownWithDrainCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceShutDownWithDrainCall) Do(f func()) *RateLimitingInterfaceShutDownWithDrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceShutDownWithDrainCall) DoAndReturn(f func()) *RateLimitingInterfaceShutDownWithDrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShuttingDown mocks base method.
func (m *MockRateLimitingWorkqueue) ShuttingDown() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShuttingDown")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShuttingDown indicates an expected call of ShuttingDown.
func (mr *MockRateLimitingWorkqueueMockRecorder) ShuttingDown() *RateLimitingInterfaceShuttingDownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShuttingDown", reflect.TypeOf((*MockRateLimitingWorkqueue)(nil).ShuttingDown))
	return &RateLimitingInterfaceShuttingDownCall{Call: call}
}

// RateLimitingInterfaceShuttingDownCall wrap *gomock.Call
type RateLimitingInterfaceShuttingDownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RateLimitingInterfaceShuttingDownCall) Return(arg0 bool) *RateLimitingInterfaceShuttingDownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RateLimitingInterfaceShuttingDownCall) Do(f func() bool) *RateLimitingInterfaceShuttingDownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RateLimitingInterfaceShuttingDownCall) DoAndReturn(f func() bool) *RateLimitingInterfaceShuttingDownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

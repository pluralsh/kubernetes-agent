// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/tools/cache (interfaces: Indexer,GenericLister,GenericNamespaceLister)
//
// Generated by this command:
//
//	mockgen -typed -destination cache.go -package mock_k8s k8s.io/client-go/tools/cache Indexer,GenericLister,GenericNamespaceLister
//
// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	labels "k8s.io/apimachinery/pkg/labels"
	runtime "k8s.io/apimachinery/pkg/runtime"
	cache "k8s.io/client-go/tools/cache"
)

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIndexer) Add(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIndexerMockRecorder) Add(arg0 any) *IndexerAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIndexer)(nil).Add), arg0)
	return &IndexerAddCall{Call: call}
}

// IndexerAddCall wrap *gomock.Call
type IndexerAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerAddCall) Return(arg0 error) *IndexerAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerAddCall) Do(f func(any) error) *IndexerAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerAddCall) DoAndReturn(f func(any) error) *IndexerAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddIndexers mocks base method.
func (m *MockIndexer) AddIndexers(arg0 cache.Indexers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndexers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndexers indicates an expected call of AddIndexers.
func (mr *MockIndexerMockRecorder) AddIndexers(arg0 any) *IndexerAddIndexersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexers", reflect.TypeOf((*MockIndexer)(nil).AddIndexers), arg0)
	return &IndexerAddIndexersCall{Call: call}
}

// IndexerAddIndexersCall wrap *gomock.Call
type IndexerAddIndexersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerAddIndexersCall) Return(arg0 error) *IndexerAddIndexersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerAddIndexersCall) Do(f func(cache.Indexers) error) *IndexerAddIndexersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerAddIndexersCall) DoAndReturn(f func(cache.Indexers) error) *IndexerAddIndexersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByIndex mocks base method.
func (m *MockIndexer) ByIndex(arg0, arg1 string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByIndex", arg0, arg1)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByIndex indicates an expected call of ByIndex.
func (mr *MockIndexerMockRecorder) ByIndex(arg0, arg1 any) *IndexerByIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByIndex", reflect.TypeOf((*MockIndexer)(nil).ByIndex), arg0, arg1)
	return &IndexerByIndexCall{Call: call}
}

// IndexerByIndexCall wrap *gomock.Call
type IndexerByIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerByIndexCall) Return(arg0 []any, arg1 error) *IndexerByIndexCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerByIndexCall) Do(f func(string, string) ([]any, error)) *IndexerByIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerByIndexCall) DoAndReturn(f func(string, string) ([]any, error)) *IndexerByIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockIndexer) Delete(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIndexerMockRecorder) Delete(arg0 any) *IndexerDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndexer)(nil).Delete), arg0)
	return &IndexerDeleteCall{Call: call}
}

// IndexerDeleteCall wrap *gomock.Call
type IndexerDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerDeleteCall) Return(arg0 error) *IndexerDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerDeleteCall) Do(f func(any) error) *IndexerDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerDeleteCall) DoAndReturn(f func(any) error) *IndexerDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIndexer) Get(arg0 any) (any, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIndexerMockRecorder) Get(arg0 any) *IndexerGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIndexer)(nil).Get), arg0)
	return &IndexerGetCall{Call: call}
}

// IndexerGetCall wrap *gomock.Call
type IndexerGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerGetCall) Return(arg0 any, arg1 bool, arg2 error) *IndexerGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerGetCall) Do(f func(any) (any, bool, error)) *IndexerGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerGetCall) DoAndReturn(f func(any) (any, bool, error)) *IndexerGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByKey mocks base method.
func (m *MockIndexer) GetByKey(arg0 string) (any, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockIndexerMockRecorder) GetByKey(arg0 any) *IndexerGetByKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockIndexer)(nil).GetByKey), arg0)
	return &IndexerGetByKeyCall{Call: call}
}

// IndexerGetByKeyCall wrap *gomock.Call
type IndexerGetByKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerGetByKeyCall) Return(arg0 any, arg1 bool, arg2 error) *IndexerGetByKeyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerGetByKeyCall) Do(f func(string) (any, bool, error)) *IndexerGetByKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerGetByKeyCall) DoAndReturn(f func(string) (any, bool, error)) *IndexerGetByKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIndexers mocks base method.
func (m *MockIndexer) GetIndexers() cache.Indexers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexers")
	ret0, _ := ret[0].(cache.Indexers)
	return ret0
}

// GetIndexers indicates an expected call of GetIndexers.
func (mr *MockIndexerMockRecorder) GetIndexers() *IndexerGetIndexersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexers", reflect.TypeOf((*MockIndexer)(nil).GetIndexers))
	return &IndexerGetIndexersCall{Call: call}
}

// IndexerGetIndexersCall wrap *gomock.Call
type IndexerGetIndexersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerGetIndexersCall) Return(arg0 cache.Indexers) *IndexerGetIndexersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerGetIndexersCall) Do(f func() cache.Indexers) *IndexerGetIndexersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerGetIndexersCall) DoAndReturn(f func() cache.Indexers) *IndexerGetIndexersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Index mocks base method.
func (m *MockIndexer) Index(arg0 string, arg1 any) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", arg0, arg1)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockIndexerMockRecorder) Index(arg0, arg1 any) *IndexerIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexer)(nil).Index), arg0, arg1)
	return &IndexerIndexCall{Call: call}
}

// IndexerIndexCall wrap *gomock.Call
type IndexerIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerIndexCall) Return(arg0 []any, arg1 error) *IndexerIndexCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerIndexCall) Do(f func(string, any) ([]any, error)) *IndexerIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerIndexCall) DoAndReturn(f func(string, any) ([]any, error)) *IndexerIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IndexKeys mocks base method.
func (m *MockIndexer) IndexKeys(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexKeys indicates an expected call of IndexKeys.
func (mr *MockIndexerMockRecorder) IndexKeys(arg0, arg1 any) *IndexerIndexKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexKeys", reflect.TypeOf((*MockIndexer)(nil).IndexKeys), arg0, arg1)
	return &IndexerIndexKeysCall{Call: call}
}

// IndexerIndexKeysCall wrap *gomock.Call
type IndexerIndexKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerIndexKeysCall) Return(arg0 []string, arg1 error) *IndexerIndexKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerIndexKeysCall) Do(f func(string, string) ([]string, error)) *IndexerIndexKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerIndexKeysCall) DoAndReturn(f func(string, string) ([]string, error)) *IndexerIndexKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIndexer) List() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]any)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIndexerMockRecorder) List() *IndexerListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIndexer)(nil).List))
	return &IndexerListCall{Call: call}
}

// IndexerListCall wrap *gomock.Call
type IndexerListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerListCall) Return(arg0 []any) *IndexerListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerListCall) Do(f func() []any) *IndexerListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerListCall) DoAndReturn(f func() []any) *IndexerListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIndexFuncValues mocks base method.
func (m *MockIndexer) ListIndexFuncValues(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexFuncValues", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListIndexFuncValues indicates an expected call of ListIndexFuncValues.
func (mr *MockIndexerMockRecorder) ListIndexFuncValues(arg0 any) *IndexerListIndexFuncValuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexFuncValues", reflect.TypeOf((*MockIndexer)(nil).ListIndexFuncValues), arg0)
	return &IndexerListIndexFuncValuesCall{Call: call}
}

// IndexerListIndexFuncValuesCall wrap *gomock.Call
type IndexerListIndexFuncValuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerListIndexFuncValuesCall) Return(arg0 []string) *IndexerListIndexFuncValuesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerListIndexFuncValuesCall) Do(f func(string) []string) *IndexerListIndexFuncValuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerListIndexFuncValuesCall) DoAndReturn(f func(string) []string) *IndexerListIndexFuncValuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListKeys mocks base method.
func (m *MockIndexer) ListKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockIndexerMockRecorder) ListKeys() *IndexerListKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockIndexer)(nil).ListKeys))
	return &IndexerListKeysCall{Call: call}
}

// IndexerListKeysCall wrap *gomock.Call
type IndexerListKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerListKeysCall) Return(arg0 []string) *IndexerListKeysCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerListKeysCall) Do(f func() []string) *IndexerListKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerListKeysCall) DoAndReturn(f func() []string) *IndexerListKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Replace mocks base method.
func (m *MockIndexer) Replace(arg0 []any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockIndexerMockRecorder) Replace(arg0, arg1 any) *IndexerReplaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockIndexer)(nil).Replace), arg0, arg1)
	return &IndexerReplaceCall{Call: call}
}

// IndexerReplaceCall wrap *gomock.Call
type IndexerReplaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerReplaceCall) Return(arg0 error) *IndexerReplaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerReplaceCall) Do(f func([]any, string) error) *IndexerReplaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerReplaceCall) DoAndReturn(f func([]any, string) error) *IndexerReplaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resync mocks base method.
func (m *MockIndexer) Resync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Resync indicates an expected call of Resync.
func (mr *MockIndexerMockRecorder) Resync() *IndexerResyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resync", reflect.TypeOf((*MockIndexer)(nil).Resync))
	return &IndexerResyncCall{Call: call}
}

// IndexerResyncCall wrap *gomock.Call
type IndexerResyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerResyncCall) Return(arg0 error) *IndexerResyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerResyncCall) Do(f func() error) *IndexerResyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerResyncCall) DoAndReturn(f func() error) *IndexerResyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockIndexer) Update(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIndexerMockRecorder) Update(arg0 any) *IndexerUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIndexer)(nil).Update), arg0)
	return &IndexerUpdateCall{Call: call}
}

// IndexerUpdateCall wrap *gomock.Call
type IndexerUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IndexerUpdateCall) Return(arg0 error) *IndexerUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IndexerUpdateCall) Do(f func(any) error) *IndexerUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IndexerUpdateCall) DoAndReturn(f func(any) error) *IndexerUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGenericLister is a mock of GenericLister interface.
type MockGenericLister struct {
	ctrl     *gomock.Controller
	recorder *MockGenericListerMockRecorder
}

// MockGenericListerMockRecorder is the mock recorder for MockGenericLister.
type MockGenericListerMockRecorder struct {
	mock *MockGenericLister
}

// NewMockGenericLister creates a new mock instance.
func NewMockGenericLister(ctrl *gomock.Controller) *MockGenericLister {
	mock := &MockGenericLister{ctrl: ctrl}
	mock.recorder = &MockGenericListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericLister) EXPECT() *MockGenericListerMockRecorder {
	return m.recorder
}

// ByNamespace mocks base method.
func (m *MockGenericLister) ByNamespace(arg0 string) cache.GenericNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByNamespace", arg0)
	ret0, _ := ret[0].(cache.GenericNamespaceLister)
	return ret0
}

// ByNamespace indicates an expected call of ByNamespace.
func (mr *MockGenericListerMockRecorder) ByNamespace(arg0 any) *GenericListerByNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByNamespace", reflect.TypeOf((*MockGenericLister)(nil).ByNamespace), arg0)
	return &GenericListerByNamespaceCall{Call: call}
}

// GenericListerByNamespaceCall wrap *gomock.Call
type GenericListerByNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GenericListerByNamespaceCall) Return(arg0 cache.GenericNamespaceLister) *GenericListerByNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GenericListerByNamespaceCall) Do(f func(string) cache.GenericNamespaceLister) *GenericListerByNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GenericListerByNamespaceCall) DoAndReturn(f func(string) cache.GenericNamespaceLister) *GenericListerByNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockGenericLister) Get(arg0 string) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGenericListerMockRecorder) Get(arg0 any) *GenericListerGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGenericLister)(nil).Get), arg0)
	return &GenericListerGetCall{Call: call}
}

// GenericListerGetCall wrap *gomock.Call
type GenericListerGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GenericListerGetCall) Return(arg0 runtime.Object, arg1 error) *GenericListerGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GenericListerGetCall) Do(f func(string) (runtime.Object, error)) *GenericListerGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GenericListerGetCall) DoAndReturn(f func(string) (runtime.Object, error)) *GenericListerGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockGenericLister) List(arg0 labels.Selector) ([]runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGenericListerMockRecorder) List(arg0 any) *GenericListerListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGenericLister)(nil).List), arg0)
	return &GenericListerListCall{Call: call}
}

// GenericListerListCall wrap *gomock.Call
type GenericListerListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GenericListerListCall) Return(arg0 []runtime.Object, arg1 error) *GenericListerListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GenericListerListCall) Do(f func(labels.Selector) ([]runtime.Object, error)) *GenericListerListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GenericListerListCall) DoAndReturn(f func(labels.Selector) ([]runtime.Object, error)) *GenericListerListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGenericNamespaceLister is a mock of GenericNamespaceLister interface.
type MockGenericNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockGenericNamespaceListerMockRecorder
}

// MockGenericNamespaceListerMockRecorder is the mock recorder for MockGenericNamespaceLister.
type MockGenericNamespaceListerMockRecorder struct {
	mock *MockGenericNamespaceLister
}

// NewMockGenericNamespaceLister creates a new mock instance.
func NewMockGenericNamespaceLister(ctrl *gomock.Controller) *MockGenericNamespaceLister {
	mock := &MockGenericNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockGenericNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericNamespaceLister) EXPECT() *MockGenericNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGenericNamespaceLister) Get(arg0 string) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGenericNamespaceListerMockRecorder) Get(arg0 any) *GenericNamespaceListerGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGenericNamespaceLister)(nil).Get), arg0)
	return &GenericNamespaceListerGetCall{Call: call}
}

// GenericNamespaceListerGetCall wrap *gomock.Call
type GenericNamespaceListerGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GenericNamespaceListerGetCall) Return(arg0 runtime.Object, arg1 error) *GenericNamespaceListerGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GenericNamespaceListerGetCall) Do(f func(string) (runtime.Object, error)) *GenericNamespaceListerGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GenericNamespaceListerGetCall) DoAndReturn(f func(string) (runtime.Object, error)) *GenericNamespaceListerGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockGenericNamespaceLister) List(arg0 labels.Selector) ([]runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGenericNamespaceListerMockRecorder) List(arg0 any) *GenericNamespaceListerListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGenericNamespaceLister)(nil).List), arg0)
	return &GenericNamespaceListerListCall{Call: call}
}

// GenericNamespaceListerListCall wrap *gomock.Call
type GenericNamespaceListerListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GenericNamespaceListerListCall) Return(arg0 []runtime.Object, arg1 error) *GenericNamespaceListerListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GenericNamespaceListerListCall) Do(f func(labels.Selector) ([]runtime.Object, error)) *GenericNamespaceListerListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GenericNamespaceListerListCall) DoAndReturn(f func(labels.Selector) ([]runtime.Object, error)) *GenericNamespaceListerListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

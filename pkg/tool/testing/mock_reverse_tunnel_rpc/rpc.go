// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kuberentes-agent/internal/module/reverse_tunnel/rpc (interfaces: ReverseTunnel_ConnectServer,ReverseTunnel_ConnectClient,ReverseTunnelClient)
//
// Generated by this command:
//
//	mockgen -typed -destination rpc.go -package mock_reverse_tunnel_rpc github.com/pluralsh/kuberentes-agent/internal/module/reverse_tunnel/rpc ReverseTunnel_ConnectServer,ReverseTunnel_ConnectClient,ReverseTunnelClient
//
// Package mock_reverse_tunnel_rpc is a generated GoMock package.
package mock_reverse_tunnel_rpc

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	rpc2 "github.com/pluralsh/kuberentes-agent/pkg/module/reverse_tunnel/rpc"
)

// MockReverseTunnel_ConnectServer is a mock of ReverseTunnel_ConnectServer interface.
type MockReverseTunnel_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnel_ConnectServerMockRecorder
}

// MockReverseTunnel_ConnectServerMockRecorder is the mock recorder for MockReverseTunnel_ConnectServer.
type MockReverseTunnel_ConnectServerMockRecorder struct {
	mock *MockReverseTunnel_ConnectServer
}

// NewMockReverseTunnel_ConnectServer creates a new mock instance.
func NewMockReverseTunnel_ConnectServer(ctrl *gomock.Controller) *MockReverseTunnel_ConnectServer {
	mock := &MockReverseTunnel_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockReverseTunnel_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnel_ConnectServer) EXPECT() *MockReverseTunnel_ConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockReverseTunnel_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Context() *ReverseTunnel_ConnectServerContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Context))
	return &ReverseTunnel_ConnectServerContextCall{Call: call}
}

// ReverseTunnel_ConnectServerContextCall wrap *gomock.Call
type ReverseTunnel_ConnectServerContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerContextCall) Return(arg0 context.Context) *ReverseTunnel_ConnectServerContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerContextCall) Do(f func() context.Context) *ReverseTunnel_ConnectServerContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerContextCall) DoAndReturn(f func() context.Context) *ReverseTunnel_ConnectServerContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recv mocks base method.
func (m *MockReverseTunnel_ConnectServer) Recv() (*rpc2.ConnectRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc2.ConnectRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Recv() *ReverseTunnel_ConnectServerRecvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Recv))
	return &ReverseTunnel_ConnectServerRecvCall{Call: call}
}

// ReverseTunnel_ConnectServerRecvCall wrap *gomock.Call
type ReverseTunnel_ConnectServerRecvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerRecvCall) Return(arg0 *rpc2.ConnectRequest, arg1 error) *ReverseTunnel_ConnectServerRecvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerRecvCall) Do(f func() (*rpc2.ConnectRequest, error)) *ReverseTunnel_ConnectServerRecvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerRecvCall) DoAndReturn(f func() (*rpc2.ConnectRequest, error)) *ReverseTunnel_ConnectServerRecvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m *MockReverseTunnel_ConnectServer) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) RecvMsg(arg0 any) *ReverseTunnel_ConnectServerRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).RecvMsg), arg0)
	return &ReverseTunnel_ConnectServerRecvMsgCall{Call: call}
}

// ReverseTunnel_ConnectServerRecvMsgCall wrap *gomock.Call
type ReverseTunnel_ConnectServerRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerRecvMsgCall) Return(arg0 error) *ReverseTunnel_ConnectServerRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerRecvMsgCall) Do(f func(any) error) *ReverseTunnel_ConnectServerRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerRecvMsgCall) DoAndReturn(f func(any) error) *ReverseTunnel_ConnectServerRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockReverseTunnel_ConnectServer) Send(arg0 *rpc2.ConnectResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Send(arg0 any) *ReverseTunnel_ConnectServerSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Send), arg0)
	return &ReverseTunnel_ConnectServerSendCall{Call: call}
}

// ReverseTunnel_ConnectServerSendCall wrap *gomock.Call
type ReverseTunnel_ConnectServerSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerSendCall) Return(arg0 error) *ReverseTunnel_ConnectServerSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerSendCall) Do(f func(*rpc2.ConnectResponse) error) *ReverseTunnel_ConnectServerSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerSendCall) DoAndReturn(f func(*rpc2.ConnectResponse) error) *ReverseTunnel_ConnectServerSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendHeader mocks base method.
func (m *MockReverseTunnel_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SendHeader(arg0 any) *ReverseTunnel_ConnectServerSendHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SendHeader), arg0)
	return &ReverseTunnel_ConnectServerSendHeaderCall{Call: call}
}

// ReverseTunnel_ConnectServerSendHeaderCall wrap *gomock.Call
type ReverseTunnel_ConnectServerSendHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerSendHeaderCall) Return(arg0 error) *ReverseTunnel_ConnectServerSendHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerSendHeaderCall) Do(f func(metadata.MD) error) *ReverseTunnel_ConnectServerSendHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerSendHeaderCall) DoAndReturn(f func(metadata.MD) error) *ReverseTunnel_ConnectServerSendHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m *MockReverseTunnel_ConnectServer) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SendMsg(arg0 any) *ReverseTunnel_ConnectServerSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SendMsg), arg0)
	return &ReverseTunnel_ConnectServerSendMsgCall{Call: call}
}

// ReverseTunnel_ConnectServerSendMsgCall wrap *gomock.Call
type ReverseTunnel_ConnectServerSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerSendMsgCall) Return(arg0 error) *ReverseTunnel_ConnectServerSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerSendMsgCall) Do(f func(any) error) *ReverseTunnel_ConnectServerSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerSendMsgCall) DoAndReturn(f func(any) error) *ReverseTunnel_ConnectServerSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHeader mocks base method.
func (m *MockReverseTunnel_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SetHeader(arg0 any) *ReverseTunnel_ConnectServerSetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SetHeader), arg0)
	return &ReverseTunnel_ConnectServerSetHeaderCall{Call: call}
}

// ReverseTunnel_ConnectServerSetHeaderCall wrap *gomock.Call
type ReverseTunnel_ConnectServerSetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerSetHeaderCall) Return(arg0 error) *ReverseTunnel_ConnectServerSetHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerSetHeaderCall) Do(f func(metadata.MD) error) *ReverseTunnel_ConnectServerSetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerSetHeaderCall) DoAndReturn(f func(metadata.MD) error) *ReverseTunnel_ConnectServerSetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTrailer mocks base method.
func (m *MockReverseTunnel_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SetTrailer(arg0 any) *ReverseTunnel_ConnectServerSetTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SetTrailer), arg0)
	return &ReverseTunnel_ConnectServerSetTrailerCall{Call: call}
}

// ReverseTunnel_ConnectServerSetTrailerCall wrap *gomock.Call
type ReverseTunnel_ConnectServerSetTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectServerSetTrailerCall) Return() *ReverseTunnel_ConnectServerSetTrailerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectServerSetTrailerCall) Do(f func(metadata.MD)) *ReverseTunnel_ConnectServerSetTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectServerSetTrailerCall) DoAndReturn(f func(metadata.MD)) *ReverseTunnel_ConnectServerSetTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReverseTunnel_ConnectClient is a mock of ReverseTunnel_ConnectClient interface.
type MockReverseTunnel_ConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnel_ConnectClientMockRecorder
}

// MockReverseTunnel_ConnectClientMockRecorder is the mock recorder for MockReverseTunnel_ConnectClient.
type MockReverseTunnel_ConnectClientMockRecorder struct {
	mock *MockReverseTunnel_ConnectClient
}

// NewMockReverseTunnel_ConnectClient creates a new mock instance.
func NewMockReverseTunnel_ConnectClient(ctrl *gomock.Controller) *MockReverseTunnel_ConnectClient {
	mock := &MockReverseTunnel_ConnectClient{ctrl: ctrl}
	mock.recorder = &MockReverseTunnel_ConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnel_ConnectClient) EXPECT() *MockReverseTunnel_ConnectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockReverseTunnel_ConnectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) CloseSend() *ReverseTunnel_ConnectClientCloseSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).CloseSend))
	return &ReverseTunnel_ConnectClientCloseSendCall{Call: call}
}

// ReverseTunnel_ConnectClientCloseSendCall wrap *gomock.Call
type ReverseTunnel_ConnectClientCloseSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientCloseSendCall) Return(arg0 error) *ReverseTunnel_ConnectClientCloseSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientCloseSendCall) Do(f func() error) *ReverseTunnel_ConnectClientCloseSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientCloseSendCall) DoAndReturn(f func() error) *ReverseTunnel_ConnectClientCloseSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Context mocks base method.
func (m *MockReverseTunnel_ConnectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Context() *ReverseTunnel_ConnectClientContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Context))
	return &ReverseTunnel_ConnectClientContextCall{Call: call}
}

// ReverseTunnel_ConnectClientContextCall wrap *gomock.Call
type ReverseTunnel_ConnectClientContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientContextCall) Return(arg0 context.Context) *ReverseTunnel_ConnectClientContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientContextCall) Do(f func() context.Context) *ReverseTunnel_ConnectClientContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientContextCall) DoAndReturn(f func() context.Context) *ReverseTunnel_ConnectClientContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockReverseTunnel_ConnectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Header() *ReverseTunnel_ConnectClientHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Header))
	return &ReverseTunnel_ConnectClientHeaderCall{Call: call}
}

// ReverseTunnel_ConnectClientHeaderCall wrap *gomock.Call
type ReverseTunnel_ConnectClientHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientHeaderCall) Return(arg0 metadata.MD, arg1 error) *ReverseTunnel_ConnectClientHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientHeaderCall) Do(f func() (metadata.MD, error)) *ReverseTunnel_ConnectClientHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientHeaderCall) DoAndReturn(f func() (metadata.MD, error)) *ReverseTunnel_ConnectClientHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recv mocks base method.
func (m *MockReverseTunnel_ConnectClient) Recv() (*rpc2.ConnectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc2.ConnectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Recv() *ReverseTunnel_ConnectClientRecvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Recv))
	return &ReverseTunnel_ConnectClientRecvCall{Call: call}
}

// ReverseTunnel_ConnectClientRecvCall wrap *gomock.Call
type ReverseTunnel_ConnectClientRecvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientRecvCall) Return(arg0 *rpc2.ConnectResponse, arg1 error) *ReverseTunnel_ConnectClientRecvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientRecvCall) Do(f func() (*rpc2.ConnectResponse, error)) *ReverseTunnel_ConnectClientRecvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientRecvCall) DoAndReturn(f func() (*rpc2.ConnectResponse, error)) *ReverseTunnel_ConnectClientRecvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m *MockReverseTunnel_ConnectClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) RecvMsg(arg0 any) *ReverseTunnel_ConnectClientRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).RecvMsg), arg0)
	return &ReverseTunnel_ConnectClientRecvMsgCall{Call: call}
}

// ReverseTunnel_ConnectClientRecvMsgCall wrap *gomock.Call
type ReverseTunnel_ConnectClientRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientRecvMsgCall) Return(arg0 error) *ReverseTunnel_ConnectClientRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientRecvMsgCall) Do(f func(any) error) *ReverseTunnel_ConnectClientRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientRecvMsgCall) DoAndReturn(f func(any) error) *ReverseTunnel_ConnectClientRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockReverseTunnel_ConnectClient) Send(arg0 *rpc2.ConnectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Send(arg0 any) *ReverseTunnel_ConnectClientSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Send), arg0)
	return &ReverseTunnel_ConnectClientSendCall{Call: call}
}

// ReverseTunnel_ConnectClientSendCall wrap *gomock.Call
type ReverseTunnel_ConnectClientSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientSendCall) Return(arg0 error) *ReverseTunnel_ConnectClientSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientSendCall) Do(f func(*rpc2.ConnectRequest) error) *ReverseTunnel_ConnectClientSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientSendCall) DoAndReturn(f func(*rpc2.ConnectRequest) error) *ReverseTunnel_ConnectClientSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m *MockReverseTunnel_ConnectClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) SendMsg(arg0 any) *ReverseTunnel_ConnectClientSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).SendMsg), arg0)
	return &ReverseTunnel_ConnectClientSendMsgCall{Call: call}
}

// ReverseTunnel_ConnectClientSendMsgCall wrap *gomock.Call
type ReverseTunnel_ConnectClientSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientSendMsgCall) Return(arg0 error) *ReverseTunnel_ConnectClientSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientSendMsgCall) Do(f func(any) error) *ReverseTunnel_ConnectClientSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientSendMsgCall) DoAndReturn(f func(any) error) *ReverseTunnel_ConnectClientSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Trailer mocks base method.
func (m *MockReverseTunnel_ConnectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Trailer() *ReverseTunnel_ConnectClientTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Trailer))
	return &ReverseTunnel_ConnectClientTrailerCall{Call: call}
}

// ReverseTunnel_ConnectClientTrailerCall wrap *gomock.Call
type ReverseTunnel_ConnectClientTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnel_ConnectClientTrailerCall) Return(arg0 metadata.MD) *ReverseTunnel_ConnectClientTrailerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnel_ConnectClientTrailerCall) Do(f func() metadata.MD) *ReverseTunnel_ConnectClientTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnel_ConnectClientTrailerCall) DoAndReturn(f func() metadata.MD) *ReverseTunnel_ConnectClientTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReverseTunnelClient is a mock of ReverseTunnelClient interface.
type MockReverseTunnelClient struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnelClientMockRecorder
}

// MockReverseTunnelClientMockRecorder is the mock recorder for MockReverseTunnelClient.
type MockReverseTunnelClientMockRecorder struct {
	mock *MockReverseTunnelClient
}

// NewMockReverseTunnelClient creates a new mock instance.
func NewMockReverseTunnelClient(ctrl *gomock.Controller) *MockReverseTunnelClient {
	mock := &MockReverseTunnelClient{ctrl: ctrl}
	mock.recorder = &MockReverseTunnelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnelClient) EXPECT() *MockReverseTunnelClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockReverseTunnelClient) Connect(arg0 context.Context, arg1 ...grpc.CallOption) (rpc2.ReverseTunnel_ConnectClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(rpc2.ReverseTunnel_ConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockReverseTunnelClientMockRecorder) Connect(arg0 any, arg1 ...any) *ReverseTunnelClientConnectCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockReverseTunnelClient)(nil).Connect), varargs...)
	return &ReverseTunnelClientConnectCall{Call: call}
}

// ReverseTunnelClientConnectCall wrap *gomock.Call
type ReverseTunnelClientConnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReverseTunnelClientConnectCall) Return(arg0 rpc2.ReverseTunnel_ConnectClient, arg1 error) *ReverseTunnelClientConnectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReverseTunnelClientConnectCall) Do(f func(context.Context, ...grpc.CallOption) (rpc2.ReverseTunnel_ConnectClient, error)) *ReverseTunnelClientConnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReverseTunnelClientConnectCall) DoAndReturn(f func(context.Context, ...grpc.CallOption) (rpc2.ReverseTunnel_ConnectClient, error)) *ReverseTunnelClientConnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

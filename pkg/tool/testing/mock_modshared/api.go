// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kuberentes-agent/pkg/module/modshared (interfaces: RpcApi,Api)
//
// Generated by this command:
//
//	mockgen -typed -destination api.go -package mock_modshared github.com/pluralsh/kuberentes-agent/pkg/module/modshared RpcApi,Api
//
// Package mock_modshared is a generated GoMock package.
package mock_modshared

import (
	context "context"
	reflect "reflect"

	retry "github.com/pluralsh/kuberentes-agent/pkg/tool/retry"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockRpcApi is a mock of RpcApi interface.
type MockRpcApi struct {
	ctrl     *gomock.Controller
	recorder *MockRpcApiMockRecorder
}

// MockRpcApiMockRecorder is the mock recorder for MockRpcApi.
type MockRpcApiMockRecorder struct {
	mock *MockRpcApi
}

// NewMockRpcApi creates a new mock instance.
func NewMockRpcApi(ctrl *gomock.Controller) *MockRpcApi {
	mock := &MockRpcApi{ctrl: ctrl}
	mock.recorder = &MockRpcApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcApi) EXPECT() *MockRpcApiMockRecorder {
	return m.recorder
}

// HandleIoError mocks base method.
func (m *MockRpcApi) HandleIoError(arg0 *zap.Logger, arg1 string, arg2 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIoError", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIoError indicates an expected call of HandleIoError.
func (mr *MockRpcApiMockRecorder) HandleIoError(arg0, arg1, arg2 any) *RpcApiHandleIoErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIoError", reflect.TypeOf((*MockRpcApi)(nil).HandleIoError), arg0, arg1, arg2)
	return &RpcApiHandleIoErrorCall{Call: call}
}

// RpcApiHandleIoErrorCall wrap *gomock.Call
type RpcApiHandleIoErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiHandleIoErrorCall) Return(arg0 error) *RpcApiHandleIoErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiHandleIoErrorCall) Do(f func(*zap.Logger, string, error) error) *RpcApiHandleIoErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiHandleIoErrorCall) DoAndReturn(f func(*zap.Logger, string, error) error) *RpcApiHandleIoErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleProcessingError mocks base method.
func (m *MockRpcApi) HandleProcessingError(arg0 *zap.Logger, arg1 int64, arg2 string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleProcessingError", arg0, arg1, arg2, arg3)
}

// HandleProcessingError indicates an expected call of HandleProcessingError.
func (mr *MockRpcApiMockRecorder) HandleProcessingError(arg0, arg1, arg2, arg3 any) *RpcApiHandleProcessingErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProcessingError", reflect.TypeOf((*MockRpcApi)(nil).HandleProcessingError), arg0, arg1, arg2, arg3)
	return &RpcApiHandleProcessingErrorCall{Call: call}
}

// RpcApiHandleProcessingErrorCall wrap *gomock.Call
type RpcApiHandleProcessingErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiHandleProcessingErrorCall) Return() *RpcApiHandleProcessingErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiHandleProcessingErrorCall) Do(f func(*zap.Logger, int64, string, error)) *RpcApiHandleProcessingErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiHandleProcessingErrorCall) DoAndReturn(f func(*zap.Logger, int64, string, error)) *RpcApiHandleProcessingErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Log mocks base method.
func (m *MockRpcApi) Log() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockRpcApiMockRecorder) Log() *RpcApiLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRpcApi)(nil).Log))
	return &RpcApiLogCall{Call: call}
}

// RpcApiLogCall wrap *gomock.Call
type RpcApiLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiLogCall) Return(arg0 *zap.Logger) *RpcApiLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiLogCall) Do(f func() *zap.Logger) *RpcApiLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiLogCall) DoAndReturn(f func() *zap.Logger) *RpcApiLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PollWithBackoff mocks base method.
func (m *MockRpcApi) PollWithBackoff(arg0 retry.PollConfig, arg1 retry.PollWithBackoffFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollWithBackoff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PollWithBackoff indicates an expected call of PollWithBackoff.
func (mr *MockRpcApiMockRecorder) PollWithBackoff(arg0, arg1 any) *RpcApiPollWithBackoffCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollWithBackoff", reflect.TypeOf((*MockRpcApi)(nil).PollWithBackoff), arg0, arg1)
	return &RpcApiPollWithBackoffCall{Call: call}
}

// RpcApiPollWithBackoffCall wrap *gomock.Call
type RpcApiPollWithBackoffCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiPollWithBackoffCall) Return(arg0 error) *RpcApiPollWithBackoffCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiPollWithBackoffCall) Do(f func(retry.PollConfig, retry.PollWithBackoffFunc) error) *RpcApiPollWithBackoffCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiPollWithBackoffCall) DoAndReturn(f func(retry.PollConfig, retry.PollWithBackoffFunc) error) *RpcApiPollWithBackoffCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// HandleProcessingError mocks base method.
func (m *MockApi) HandleProcessingError(arg0 context.Context, arg1 *zap.Logger, arg2 int64, arg3 string, arg4 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleProcessingError", arg0, arg1, arg2, arg3, arg4)
}

// HandleProcessingError indicates an expected call of HandleProcessingError.
func (mr *MockApiMockRecorder) HandleProcessingError(arg0, arg1, arg2, arg3, arg4 any) *ApiHandleProcessingErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProcessingError", reflect.TypeOf((*MockApi)(nil).HandleProcessingError), arg0, arg1, arg2, arg3, arg4)
	return &ApiHandleProcessingErrorCall{Call: call}
}

// ApiHandleProcessingErrorCall wrap *gomock.Call
type ApiHandleProcessingErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ApiHandleProcessingErrorCall) Return() *ApiHandleProcessingErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ApiHandleProcessingErrorCall) Do(f func(context.Context, *zap.Logger, int64, string, error)) *ApiHandleProcessingErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ApiHandleProcessingErrorCall) DoAndReturn(f func(context.Context, *zap.Logger, int64, string, error)) *ApiHandleProcessingErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

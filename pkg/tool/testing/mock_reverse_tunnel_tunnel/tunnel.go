// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kuberentes-agent/pkg/module/reverse_tunnel/tunnel (interfaces: Tracker,Handler,FindHandle,Tunnel,PollingQuerier,Finder)
//
// Generated by this command:
//
//	mockgen -typed -destination tunnel.go -package mock_reverse_tunnel_tunnel github.com/pluralsh/kuberentes-agent/pkg/module/reverse_tunnel/tunnel Tracker,Handler,FindHandle,Tunnel,PollingQuerier,Finder
//
// Package mock_reverse_tunnel_tunnel is a generated GoMock package.
package mock_reverse_tunnel_tunnel

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/pluralsh/kuberentes-agent/pkg/api"
	rpc "github.com/pluralsh/kuberentes-agent/pkg/module/reverse_tunnel/rpc"
	tunnel "github.com/pluralsh/kuberentes-agent/pkg/module/reverse_tunnel/tunnel"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
	grpc "google.golang.org/grpc"
)

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// KasUrlsByAgentId mocks base method.
func (m *MockTracker) KasUrlsByAgentId(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KasUrlsByAgentId", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KasUrlsByAgentId indicates an expected call of KasUrlsByAgentId.
func (mr *MockTrackerMockRecorder) KasUrlsByAgentId(arg0, arg1 any) *TrackerKasUrlsByAgentIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KasUrlsByAgentId", reflect.TypeOf((*MockTracker)(nil).KasUrlsByAgentId), arg0, arg1)
	return &TrackerKasUrlsByAgentIdCall{Call: call}
}

// TrackerKasUrlsByAgentIdCall wrap *gomock.Call
type TrackerKasUrlsByAgentIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TrackerKasUrlsByAgentIdCall) Return(arg0 []string, arg1 error) *TrackerKasUrlsByAgentIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TrackerKasUrlsByAgentIdCall) Do(f func(context.Context, int64) ([]string, error)) *TrackerKasUrlsByAgentIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TrackerKasUrlsByAgentIdCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *TrackerKasUrlsByAgentIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockTracker) Refresh(arg0 context.Context, arg1 time.Duration, arg2 ...int64) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Refresh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockTrackerMockRecorder) Refresh(arg0, arg1 any, arg2 ...any) *TrackerRefreshCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockTracker)(nil).Refresh), varargs...)
	return &TrackerRefreshCall{Call: call}
}

// TrackerRefreshCall wrap *gomock.Call
type TrackerRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TrackerRefreshCall) Return(arg0 error) *TrackerRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TrackerRefreshCall) Do(f func(context.Context, time.Duration, ...int64) error) *TrackerRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TrackerRefreshCall) DoAndReturn(f func(context.Context, time.Duration, ...int64) error) *TrackerRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterTunnel mocks base method.
func (m *MockTracker) RegisterTunnel(arg0 context.Context, arg1 time.Duration, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTunnel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTunnel indicates an expected call of RegisterTunnel.
func (mr *MockTrackerMockRecorder) RegisterTunnel(arg0, arg1, arg2 any) *TrackerRegisterTunnelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTunnel", reflect.TypeOf((*MockTracker)(nil).RegisterTunnel), arg0, arg1, arg2)
	return &TrackerRegisterTunnelCall{Call: call}
}

// TrackerRegisterTunnelCall wrap *gomock.Call
type TrackerRegisterTunnelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TrackerRegisterTunnelCall) Return(arg0 error) *TrackerRegisterTunnelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TrackerRegisterTunnelCall) Do(f func(context.Context, time.Duration, int64) error) *TrackerRegisterTunnelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TrackerRegisterTunnelCall) DoAndReturn(f func(context.Context, time.Duration, int64) error) *TrackerRegisterTunnelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnregisterTunnel mocks base method.
func (m *MockTracker) UnregisterTunnel(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterTunnel indicates an expected call of UnregisterTunnel.
func (mr *MockTrackerMockRecorder) UnregisterTunnel(arg0, arg1 any) *TrackerUnregisterTunnelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTunnel", reflect.TypeOf((*MockTracker)(nil).UnregisterTunnel), arg0, arg1)
	return &TrackerUnregisterTunnelCall{Call: call}
}

// TrackerUnregisterTunnelCall wrap *gomock.Call
type TrackerUnregisterTunnelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TrackerUnregisterTunnelCall) Return(arg0 error) *TrackerUnregisterTunnelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TrackerUnregisterTunnelCall) Do(f func(context.Context, int64) error) *TrackerUnregisterTunnelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TrackerUnregisterTunnelCall) DoAndReturn(f func(context.Context, int64) error) *TrackerUnregisterTunnelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleTunnel mocks base method.
func (m *MockHandler) HandleTunnel(arg0 context.Context, arg1 *api.AgentInfo, arg2 rpc.ReverseTunnel_ConnectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTunnel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTunnel indicates an expected call of HandleTunnel.
func (mr *MockHandlerMockRecorder) HandleTunnel(arg0, arg1, arg2 any) *HandlerHandleTunnelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTunnel", reflect.TypeOf((*MockHandler)(nil).HandleTunnel), arg0, arg1, arg2)
	return &HandlerHandleTunnelCall{Call: call}
}

// HandlerHandleTunnelCall wrap *gomock.Call
type HandlerHandleTunnelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HandlerHandleTunnelCall) Return(arg0 error) *HandlerHandleTunnelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HandlerHandleTunnelCall) Do(f func(context.Context, *api.AgentInfo, rpc.ReverseTunnel_ConnectServer) error) *HandlerHandleTunnelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HandlerHandleTunnelCall) DoAndReturn(f func(context.Context, *api.AgentInfo, rpc.ReverseTunnel_ConnectServer) error) *HandlerHandleTunnelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFindHandle is a mock of FindHandle interface.
type MockFindHandle struct {
	ctrl     *gomock.Controller
	recorder *MockFindHandleMockRecorder
}

// MockFindHandleMockRecorder is the mock recorder for MockFindHandle.
type MockFindHandleMockRecorder struct {
	mock *MockFindHandle
}

// NewMockFindHandle creates a new mock instance.
func NewMockFindHandle(ctrl *gomock.Controller) *MockFindHandle {
	mock := &MockFindHandle{ctrl: ctrl}
	mock.recorder = &MockFindHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindHandle) EXPECT() *MockFindHandleMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockFindHandle) Done(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0)
}

// Done indicates an expected call of Done.
func (mr *MockFindHandleMockRecorder) Done(arg0 any) *FindHandleDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockFindHandle)(nil).Done), arg0)
	return &FindHandleDoneCall{Call: call}
}

// FindHandleDoneCall wrap *gomock.Call
type FindHandleDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FindHandleDoneCall) Return() *FindHandleDoneCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FindHandleDoneCall) Do(f func(context.Context)) *FindHandleDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FindHandleDoneCall) DoAndReturn(f func(context.Context)) *FindHandleDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockFindHandle) Get(arg0 context.Context) (tunnel.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(tunnel.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFindHandleMockRecorder) Get(arg0 any) *FindHandleGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFindHandle)(nil).Get), arg0)
	return &FindHandleGetCall{Call: call}
}

// FindHandleGetCall wrap *gomock.Call
type FindHandleGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FindHandleGetCall) Return(arg0 tunnel.Tunnel, arg1 error) *FindHandleGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FindHandleGetCall) Do(f func(context.Context) (tunnel.Tunnel, error)) *FindHandleGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FindHandleGetCall) DoAndReturn(f func(context.Context) (tunnel.Tunnel, error)) *FindHandleGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTunnel is a mock of Tunnel interface.
type MockTunnel struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelMockRecorder
}

// MockTunnelMockRecorder is the mock recorder for MockTunnel.
type MockTunnelMockRecorder struct {
	mock *MockTunnel
}

// NewMockTunnel creates a new mock instance.
func NewMockTunnel(ctrl *gomock.Controller) *MockTunnel {
	mock := &MockTunnel{ctrl: ctrl}
	mock.recorder = &MockTunnelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnel) EXPECT() *MockTunnelMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockTunnel) Done(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0)
}

// Done indicates an expected call of Done.
func (mr *MockTunnelMockRecorder) Done(arg0 any) *TunnelDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTunnel)(nil).Done), arg0)
	return &TunnelDoneCall{Call: call}
}

// TunnelDoneCall wrap *gomock.Call
type TunnelDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TunnelDoneCall) Return() *TunnelDoneCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TunnelDoneCall) Do(f func(context.Context)) *TunnelDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TunnelDoneCall) DoAndReturn(f func(context.Context)) *TunnelDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForwardStream mocks base method.
func (m *MockTunnel) ForwardStream(arg0 *zap.Logger, arg1 tunnel.RpcApi, arg2 grpc.ServerStream, arg3 tunnel.DataCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardStream indicates an expected call of ForwardStream.
func (mr *MockTunnelMockRecorder) ForwardStream(arg0, arg1, arg2, arg3 any) *TunnelForwardStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardStream", reflect.TypeOf((*MockTunnel)(nil).ForwardStream), arg0, arg1, arg2, arg3)
	return &TunnelForwardStreamCall{Call: call}
}

// TunnelForwardStreamCall wrap *gomock.Call
type TunnelForwardStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TunnelForwardStreamCall) Return(arg0 error) *TunnelForwardStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TunnelForwardStreamCall) Do(f func(*zap.Logger, tunnel.RpcApi, grpc.ServerStream, tunnel.DataCallback) error) *TunnelForwardStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TunnelForwardStreamCall) DoAndReturn(f func(*zap.Logger, tunnel.RpcApi, grpc.ServerStream, tunnel.DataCallback) error) *TunnelForwardStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPollingQuerier is a mock of PollingQuerier interface.
type MockPollingQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockPollingQuerierMockRecorder
}

// MockPollingQuerierMockRecorder is the mock recorder for MockPollingQuerier.
type MockPollingQuerierMockRecorder struct {
	mock *MockPollingQuerier
}

// NewMockPollingQuerier creates a new mock instance.
func NewMockPollingQuerier(ctrl *gomock.Controller) *MockPollingQuerier {
	mock := &MockPollingQuerier{ctrl: ctrl}
	mock.recorder = &MockPollingQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollingQuerier) EXPECT() *MockPollingQuerierMockRecorder {
	return m.recorder
}

// CachedKasUrlsByAgentId mocks base method.
func (m *MockPollingQuerier) CachedKasUrlsByAgentId(arg0 int64) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedKasUrlsByAgentId", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// CachedKasUrlsByAgentId indicates an expected call of CachedKasUrlsByAgentId.
func (mr *MockPollingQuerierMockRecorder) CachedKasUrlsByAgentId(arg0 any) *PollingQuerierCachedKasUrlsByAgentIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedKasUrlsByAgentId", reflect.TypeOf((*MockPollingQuerier)(nil).CachedKasUrlsByAgentId), arg0)
	return &PollingQuerierCachedKasUrlsByAgentIdCall{Call: call}
}

// PollingQuerierCachedKasUrlsByAgentIdCall wrap *gomock.Call
type PollingQuerierCachedKasUrlsByAgentIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PollingQuerierCachedKasUrlsByAgentIdCall) Return(arg0 []string) *PollingQuerierCachedKasUrlsByAgentIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PollingQuerierCachedKasUrlsByAgentIdCall) Do(f func(int64) []string) *PollingQuerierCachedKasUrlsByAgentIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PollingQuerierCachedKasUrlsByAgentIdCall) DoAndReturn(f func(int64) []string) *PollingQuerierCachedKasUrlsByAgentIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PollKasUrlsByAgentId mocks base method.
func (m *MockPollingQuerier) PollKasUrlsByAgentId(arg0 context.Context, arg1 int64, arg2 tunnel.PollKasUrlsByAgentIdCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PollKasUrlsByAgentId", arg0, arg1, arg2)
}

// PollKasUrlsByAgentId indicates an expected call of PollKasUrlsByAgentId.
func (mr *MockPollingQuerierMockRecorder) PollKasUrlsByAgentId(arg0, arg1, arg2 any) *PollingQuerierPollKasUrlsByAgentIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollKasUrlsByAgentId", reflect.TypeOf((*MockPollingQuerier)(nil).PollKasUrlsByAgentId), arg0, arg1, arg2)
	return &PollingQuerierPollKasUrlsByAgentIdCall{Call: call}
}

// PollingQuerierPollKasUrlsByAgentIdCall wrap *gomock.Call
type PollingQuerierPollKasUrlsByAgentIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PollingQuerierPollKasUrlsByAgentIdCall) Return() *PollingQuerierPollKasUrlsByAgentIdCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PollingQuerierPollKasUrlsByAgentIdCall) Do(f func(context.Context, int64, tunnel.PollKasUrlsByAgentIdCallback)) *PollingQuerierPollKasUrlsByAgentIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PollingQuerierPollKasUrlsByAgentIdCall) DoAndReturn(f func(context.Context, int64, tunnel.PollKasUrlsByAgentIdCallback)) *PollingQuerierPollKasUrlsByAgentIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFinder is a mock of Finder interface.
type MockFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFinderMockRecorder
}

// MockFinderMockRecorder is the mock recorder for MockFinder.
type MockFinderMockRecorder struct {
	mock *MockFinder
}

// NewMockFinder creates a new mock instance.
func NewMockFinder(ctrl *gomock.Controller) *MockFinder {
	mock := &MockFinder{ctrl: ctrl}
	mock.recorder = &MockFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinder) EXPECT() *MockFinderMockRecorder {
	return m.recorder
}

// FindTunnel mocks base method.
func (m *MockFinder) FindTunnel(arg0 context.Context, arg1 int64, arg2, arg3 string) (bool, tunnel.FindHandle) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTunnel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(tunnel.FindHandle)
	return ret0, ret1
}

// FindTunnel indicates an expected call of FindTunnel.
func (mr *MockFinderMockRecorder) FindTunnel(arg0, arg1, arg2, arg3 any) *FinderFindTunnelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTunnel", reflect.TypeOf((*MockFinder)(nil).FindTunnel), arg0, arg1, arg2, arg3)
	return &FinderFindTunnelCall{Call: call}
}

// FinderFindTunnelCall wrap *gomock.Call
type FinderFindTunnelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FinderFindTunnelCall) Return(arg0 bool, arg1 tunnel.FindHandle) *FinderFindTunnelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FinderFindTunnelCall) Do(f func(context.Context, int64, string, string) (bool, tunnel.FindHandle)) *FinderFindTunnelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FinderFindTunnelCall) DoAndReturn(f func(context.Context, int64, string, string) (bool, tunnel.FindHandle)) *FinderFindTunnelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

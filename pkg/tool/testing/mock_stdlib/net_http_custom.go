// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kubernetes-agent/pkg/tool/testing/mock_stdlib (interfaces: ResponseWriterFlusher)
//
// Generated by this command:
//
//	mockgen -typed -destination net_http_custom.go -package mock_stdlib github.com/pluralsh/kubernetes-agent/pkg/tool/testing/mock_stdlib ResponseWriterFlusher
//
// Package mock_stdlib is a generated GoMock package.
package mock_stdlib

import (
	bufio "bufio"
	net "net"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResponseWriterFlusher is a mock of ResponseWriterFlusher interface.
type MockResponseWriterFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterFlusherMockRecorder
}

// MockResponseWriterFlusherMockRecorder is the mock recorder for MockResponseWriterFlusher.
type MockResponseWriterFlusherMockRecorder struct {
	mock *MockResponseWriterFlusher
}

// NewMockResponseWriterFlusher creates a new mock instance.
func NewMockResponseWriterFlusher(ctrl *gomock.Controller) *MockResponseWriterFlusher {
	mock := &MockResponseWriterFlusher{ctrl: ctrl}
	mock.recorder = &MockResponseWriterFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseWriterFlusher) EXPECT() *MockResponseWriterFlusherMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockResponseWriterFlusher) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockResponseWriterFlusherMockRecorder) Flush() *ResponseWriterFlusherFlushCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockResponseWriterFlusher)(nil).Flush))
	return &ResponseWriterFlusherFlushCall{Call: call}
}

// ResponseWriterFlusherFlushCall wrap *gomock.Call
type ResponseWriterFlusherFlushCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResponseWriterFlusherFlushCall) Return() *ResponseWriterFlusherFlushCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResponseWriterFlusherFlushCall) Do(f func()) *ResponseWriterFlusherFlushCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResponseWriterFlusherFlushCall) DoAndReturn(f func()) *ResponseWriterFlusherFlushCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockResponseWriterFlusher) Header() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockResponseWriterFlusherMockRecorder) Header() *ResponseWriterFlusherHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockResponseWriterFlusher)(nil).Header))
	return &ResponseWriterFlusherHeaderCall{Call: call}
}

// ResponseWriterFlusherHeaderCall wrap *gomock.Call
type ResponseWriterFlusherHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResponseWriterFlusherHeaderCall) Return(arg0 http.Header) *ResponseWriterFlusherHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResponseWriterFlusherHeaderCall) Do(f func() http.Header) *ResponseWriterFlusherHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResponseWriterFlusherHeaderCall) DoAndReturn(f func() http.Header) *ResponseWriterFlusherHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Hijack mocks base method.
func (m *MockResponseWriterFlusher) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hijack")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(*bufio.ReadWriter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hijack indicates an expected call of Hijack.
func (mr *MockResponseWriterFlusherMockRecorder) Hijack() *ResponseWriterFlusherHijackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hijack", reflect.TypeOf((*MockResponseWriterFlusher)(nil).Hijack))
	return &ResponseWriterFlusherHijackCall{Call: call}
}

// ResponseWriterFlusherHijackCall wrap *gomock.Call
type ResponseWriterFlusherHijackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResponseWriterFlusherHijackCall) Return(arg0 net.Conn, arg1 *bufio.ReadWriter, arg2 error) *ResponseWriterFlusherHijackCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResponseWriterFlusherHijackCall) Do(f func() (net.Conn, *bufio.ReadWriter, error)) *ResponseWriterFlusherHijackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResponseWriterFlusherHijackCall) DoAndReturn(f func() (net.Conn, *bufio.ReadWriter, error)) *ResponseWriterFlusherHijackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockResponseWriterFlusher) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockResponseWriterFlusherMockRecorder) Write(arg0 any) *ResponseWriterFlusherWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriterFlusher)(nil).Write), arg0)
	return &ResponseWriterFlusherWriteCall{Call: call}
}

// ResponseWriterFlusherWriteCall wrap *gomock.Call
type ResponseWriterFlusherWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResponseWriterFlusherWriteCall) Return(arg0 int, arg1 error) *ResponseWriterFlusherWriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResponseWriterFlusherWriteCall) Do(f func([]byte) (int, error)) *ResponseWriterFlusherWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResponseWriterFlusherWriteCall) DoAndReturn(f func([]byte) (int, error)) *ResponseWriterFlusherWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteHeader mocks base method.
func (m *MockResponseWriterFlusher) WriteHeader(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", arg0)
}

// WriteHeader indicates an expected call of WriteHeader.
func (mr *MockResponseWriterFlusherMockRecorder) WriteHeader(arg0 any) *ResponseWriterFlusherWriteHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockResponseWriterFlusher)(nil).WriteHeader), arg0)
	return &ResponseWriterFlusherWriteHeaderCall{Call: call}
}

// ResponseWriterFlusherWriteHeaderCall wrap *gomock.Call
type ResponseWriterFlusherWriteHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ResponseWriterFlusherWriteHeaderCall) Return() *ResponseWriterFlusherWriteHeaderCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ResponseWriterFlusherWriteHeaderCall) Do(f func(int)) *ResponseWriterFlusherWriteHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ResponseWriterFlusherWriteHeaderCall) DoAndReturn(f func(int)) *ResponseWriterFlusherWriteHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

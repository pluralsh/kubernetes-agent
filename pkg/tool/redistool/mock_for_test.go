// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kuberentes-agent/internal/tool/redistool (interfaces: RpcApi)
//
// Generated by this command:
//
//	mockgen -typed -self_package github.com/pluralsh/kuberentes-agent/internal/tool/redistool -destination mock_for_test.go -package redistool github.com/pluralsh/kuberentes-agent/internal/tool/redistool RpcApi
//
// Package redistool is a generated GoMock package.
package redistool

import (
	"reflect"

	"go.uber.org/mock/gomock"
	"go.uber.org/zap"
)

// MockRpcApi is a mock of RpcApi interface.
type MockRpcApi struct {
	ctrl     *gomock.Controller
	recorder *MockRpcApiMockRecorder
}

// MockRpcApiMockRecorder is the mock recorder for MockRpcApi.
type MockRpcApiMockRecorder struct {
	mock *MockRpcApi
}

// NewMockRpcApi creates a new mock instance.
func NewMockRpcApi(ctrl *gomock.Controller) *MockRpcApi {
	mock := &MockRpcApi{ctrl: ctrl}
	mock.recorder = &MockRpcApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcApi) EXPECT() *MockRpcApiMockRecorder {
	return m.recorder
}

// HandleProcessingError mocks base method.
func (m *MockRpcApi) HandleProcessingError(arg0 string, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleProcessingError", arg0, arg1)
}

// HandleProcessingError indicates an expected call of HandleProcessingError.
func (mr *MockRpcApiMockRecorder) HandleProcessingError(arg0, arg1 any) *RpcApiHandleProcessingErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProcessingError", reflect.TypeOf((*MockRpcApi)(nil).HandleProcessingError), arg0, arg1)
	return &RpcApiHandleProcessingErrorCall{Call: call}
}

// RpcApiHandleProcessingErrorCall wrap *gomock.Call
type RpcApiHandleProcessingErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiHandleProcessingErrorCall) Return() *RpcApiHandleProcessingErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiHandleProcessingErrorCall) Do(f func(string, error)) *RpcApiHandleProcessingErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiHandleProcessingErrorCall) DoAndReturn(f func(string, error)) *RpcApiHandleProcessingErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Log mocks base method.
func (m *MockRpcApi) Log() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockRpcApiMockRecorder) Log() *RpcApiLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRpcApi)(nil).Log))
	return &RpcApiLogCall{Call: call}
}

// RpcApiLogCall wrap *gomock.Call
type RpcApiLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiLogCall) Return(arg0 *zap.Logger) *RpcApiLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiLogCall) Do(f func() *zap.Logger) *RpcApiLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiLogCall) DoAndReturn(f func() *zap.Logger) *RpcApiLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequestKey mocks base method.
func (m *MockRpcApi) RequestKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RequestKey indicates an expected call of RequestKey.
func (mr *MockRpcApiMockRecorder) RequestKey() *RpcApiRequestKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestKey", reflect.TypeOf((*MockRpcApi)(nil).RequestKey))
	return &RpcApiRequestKeyCall{Call: call}
}

// RpcApiRequestKeyCall wrap *gomock.Call
type RpcApiRequestKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RpcApiRequestKeyCall) Return(arg0 []byte) *RpcApiRequestKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RpcApiRequestKeyCall) Do(f func() []byte) *RpcApiRequestKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RpcApiRequestKeyCall) DoAndReturn(f func() []byte) *RpcApiRequestKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

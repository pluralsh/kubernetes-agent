// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: pkg/module/agent_registrar/rpc/rpc.proto

// If you make any changes make sure you run: make regenerate-proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentRegistrar_Register_FullMethodName = "/gitlab.agent.agent_registrar.rpc.AgentRegistrar/Register"
)

// AgentRegistrarClient is the client API for AgentRegistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentRegistrarClient interface {
	// Register a new agent.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type agentRegistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentRegistrarClient(cc grpc.ClientConnInterface) AgentRegistrarClient {
	return &agentRegistrarClient{cc}
}

func (c *agentRegistrarClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AgentRegistrar_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentRegistrarServer is the server API for AgentRegistrar service.
// All implementations must embed UnimplementedAgentRegistrarServer
// for forward compatibility
type AgentRegistrarServer interface {
	// Register a new agent.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedAgentRegistrarServer()
}

// UnimplementedAgentRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedAgentRegistrarServer struct {
}

func (UnimplementedAgentRegistrarServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAgentRegistrarServer) mustEmbedUnimplementedAgentRegistrarServer() {}

// UnsafeAgentRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentRegistrarServer will
// result in compilation errors.
type UnsafeAgentRegistrarServer interface {
	mustEmbedUnimplementedAgentRegistrarServer()
}

func RegisterAgentRegistrarServer(s grpc.ServiceRegistrar, srv AgentRegistrarServer) {
	s.RegisterService(&AgentRegistrar_ServiceDesc, srv)
}

func _AgentRegistrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentRegistrar_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegistrarServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentRegistrar_ServiceDesc is the grpc.ServiceDesc for AgentRegistrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentRegistrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.agent.agent_registrar.rpc.AgentRegistrar",
	HandlerType: (*AgentRegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AgentRegistrar_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/module/agent_registrar/rpc/rpc.proto",
}

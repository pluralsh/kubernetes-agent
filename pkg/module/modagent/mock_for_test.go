// Code generated by MockGen. DO NOT EDIT.
// Source: worker_manager.go
//
// Generated by this command:
//
//	mockgen -typed -source worker_manager.go -destination mock_for_test.go -package modagent
//
// Package modagent is a generated GoMock package.
package modagent

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"
	"google.golang.org/protobuf/proto"

	"github.com/pluralsh/kuberentes-agent/pkg/agentcfg"
)

// MockWorkSource is a mock of WorkSource interface.
type MockWorkSource[C proto.Message] struct {
	ctrl     *gomock.Controller
	recorder *MockWorkSourceMockRecorder[C]
}

// MockWorkSourceMockRecorder is the mock recorder for MockWorkSource.
type MockWorkSourceMockRecorder[C proto.Message] struct {
	mock *MockWorkSource[C]
}

// NewMockWorkSource creates a new mock instance.
func NewMockWorkSource[C proto.Message](ctrl *gomock.Controller) *MockWorkSource[C] {
	mock := &MockWorkSource[C]{ctrl: ctrl}
	mock.recorder = &MockWorkSourceMockRecorder[C]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkSource[C]) EXPECT() *MockWorkSourceMockRecorder[C] {
	return m.recorder
}

// Configuration mocks base method.
func (m *MockWorkSource[C]) Configuration() C {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(C)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockWorkSourceMockRecorder[C]) Configuration() *WorkSourceConfigurationCall[C] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockWorkSource[C])(nil).Configuration))
	return &WorkSourceConfigurationCall[C]{Call: call}
}

// WorkSourceConfigurationCall wrap *gomock.Call
type WorkSourceConfigurationCall[C proto.Message] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WorkSourceConfigurationCall[C]) Return(arg0 C) *WorkSourceConfigurationCall[C] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WorkSourceConfigurationCall[C]) Do(f func() C) *WorkSourceConfigurationCall[C] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WorkSourceConfigurationCall[C]) DoAndReturn(f func() C) *WorkSourceConfigurationCall[C] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockWorkSource[C]) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockWorkSourceMockRecorder[C]) ID() *WorkSourceIDCall[C] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockWorkSource[C])(nil).ID))
	return &WorkSourceIDCall[C]{Call: call}
}

// WorkSourceIDCall wrap *gomock.Call
type WorkSourceIDCall[C proto.Message] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WorkSourceIDCall[C]) Return(arg0 string) *WorkSourceIDCall[C] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WorkSourceIDCall[C]) Do(f func() string) *WorkSourceIDCall[C] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WorkSourceIDCall[C]) DoAndReturn(f func() string) *WorkSourceIDCall[C] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWorkerFactory is a mock of WorkerFactory interface.
type MockWorkerFactory[C proto.Message] struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerFactoryMockRecorder[C]
}

// MockWorkerFactoryMockRecorder is the mock recorder for MockWorkerFactory.
type MockWorkerFactoryMockRecorder[C proto.Message] struct {
	mock *MockWorkerFactory[C]
}

// NewMockWorkerFactory creates a new mock instance.
func NewMockWorkerFactory[C proto.Message](ctrl *gomock.Controller) *MockWorkerFactory[C] {
	mock := &MockWorkerFactory[C]{ctrl: ctrl}
	mock.recorder = &MockWorkerFactoryMockRecorder[C]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerFactory[C]) EXPECT() *MockWorkerFactoryMockRecorder[C] {
	return m.recorder
}

// New mocks base method.
func (m *MockWorkerFactory[C]) New(agentId int64, source WorkSource[C]) Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", agentId, source)
	ret0, _ := ret[0].(Worker)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockWorkerFactoryMockRecorder[C]) New(agentId, source any) *WorkerFactoryNewCall[C] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockWorkerFactory[C])(nil).New), agentId, source)
	return &WorkerFactoryNewCall[C]{Call: call}
}

// WorkerFactoryNewCall wrap *gomock.Call
type WorkerFactoryNewCall[C proto.Message] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WorkerFactoryNewCall[C]) Return(arg0 Worker) *WorkerFactoryNewCall[C] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WorkerFactoryNewCall[C]) Do(f func(int64, WorkSource[C]) Worker) *WorkerFactoryNewCall[C] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WorkerFactoryNewCall[C]) DoAndReturn(f func(int64, WorkSource[C]) Worker) *WorkerFactoryNewCall[C] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SourcesFromConfiguration mocks base method.
func (m *MockWorkerFactory[C]) SourcesFromConfiguration(arg0 *agentcfg.AgentConfiguration) []WorkSource[C] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesFromConfiguration", arg0)
	ret0, _ := ret[0].([]WorkSource[C])
	return ret0
}

// SourcesFromConfiguration indicates an expected call of SourcesFromConfiguration.
func (mr *MockWorkerFactoryMockRecorder[C]) SourcesFromConfiguration(arg0 any) *WorkerFactorySourcesFromConfigurationCall[C] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesFromConfiguration", reflect.TypeOf((*MockWorkerFactory[C])(nil).SourcesFromConfiguration), arg0)
	return &WorkerFactorySourcesFromConfigurationCall[C]{Call: call}
}

// WorkerFactorySourcesFromConfigurationCall wrap *gomock.Call
type WorkerFactorySourcesFromConfigurationCall[C proto.Message] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WorkerFactorySourcesFromConfigurationCall[C]) Return(arg0 []WorkSource[C]) *WorkerFactorySourcesFromConfigurationCall[C] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WorkerFactorySourcesFromConfigurationCall[C]) Do(f func(*agentcfg.AgentConfiguration) []WorkSource[C]) *WorkerFactorySourcesFromConfigurationCall[C] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WorkerFactorySourcesFromConfigurationCall[C]) DoAndReturn(f func(*agentcfg.AgentConfiguration) []WorkSource[C]) *WorkerFactorySourcesFromConfigurationCall[C] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWorker) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockWorkerMockRecorder) Run(arg0 any) *WorkerRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorker)(nil).Run), arg0)
	return &WorkerRunCall{Call: call}
}

// WorkerRunCall wrap *gomock.Call
type WorkerRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WorkerRunCall) Return() *WorkerRunCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WorkerRunCall) Do(f func(context.Context)) *WorkerRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WorkerRunCall) DoAndReturn(f func(context.Context)) *WorkerRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

syntax = "proto3";

// If you make any changes make sure you run: make regenerate-proto

package gitlab.agent.entity;

option go_package = "github.com/pluralsh/kuberentes-agent/pkg/entity";

import "validate/validate.proto";

// AgentMeta contains information about agentk.
message AgentMeta {
  // Version of the binary.
  string version = 1 [json_name = "version"];
  // Short commit sha of the binary.
  string commit_id = 2 [json_name = "commit_id"];
  // Namespace of the Pod running the binary.
  string pod_namespace = 3 [json_name = "pod_namespace"];
  // Name of the Pod running the binary.
  string pod_name = 4 [json_name = "pod_name"];
  // Version of the Kubernetes cluster.
  KubernetesVersion kubernetes_version = 5 [json_name = "kubernetes_version"];
}

// Version information of the Kubernetes cluster.
message KubernetesVersion {
  // Major version of the Kubernetes cluster.
  string major = 1 [json_name = "major"];
  // Minor version of the Kubernetes cluster.
  string minor = 2 [json_name = "minor"];
  // Git version of the Kubernetes cluster.
  string git_version = 3 [json_name = "git_version"];
  // Platform of the Kubernetes cluster.
  string platform = 4 [json_name = "platform"];
}

message GitalyInfo {
  string address = 1 [json_name = "address", (validate.rules).string.min_bytes = 1];
  string token = 2 [json_name = "token"];
  map<string, string> features = 3 [json_name = "features"];
}

// Modified copy of Gitaly's https://gitlab.com/gitlab-org/gitaly/-/blob/55cb537898bce04e5e44be074a4d3d441e1f62b6/proto/shared.proto#L25
// Was copied to avoid exposing Gitaly type in the API and forcing the consumer to have a dependency on Gitaly.
message GitalyRepository {
  string storage_name = 2 [json_name = "storage_name", (validate.rules).string.min_bytes = 1];
  string relative_path = 3 [json_name = "relative_path", (validate.rules).string.min_bytes = 1];
  // Sets the GIT_OBJECT_DIRECTORY envvar on git commands to the value of this field.
  // It influences the object storage directory the SHA1 directories are created underneath.
  string git_object_directory = 4 [json_name = "git_object_directory"];
  // Sets the GIT_ALTERNATE_OBJECT_DIRECTORIES envvar on git commands to the values of this field.
  // It influences the list of Git object directories which can be used to search for Git objects.
  repeated string git_alternate_object_directories = 5 [json_name = "git_alternate_object_directories"];
  // Used in callbacks to GitLab so that it knows what repository the event is
  // associated with. May be left empty on RPC's that do not perform callbacks.
  // During project creation, `gl_repository` may not be known.
  string gl_repository = 6 [json_name = "gl_repository", (validate.rules).string.min_bytes = 1];
  // The human-readable GitLab project path (e.g. gitlab-org/gitlab-ce).
  // When hashed storage is use, this associates a project path with its
  // path on disk. The name can change over time (e.g. when a project is
  // renamed). This is primarily used for logging/debugging at the
  // moment.
  string gl_project_path = 8 [json_name = "gl_project_path", (validate.rules).string.min_bytes = 1];
}

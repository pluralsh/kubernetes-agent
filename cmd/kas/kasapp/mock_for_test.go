// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pluralsh/kubernetes-agent/cmd/kas/kasapp (interfaces: SentryHub)
//
// Generated by this command:
//
//	mockgen -typed -destination mock_for_test.go -package kasapp github.com/pluralsh/kubernetes-agent/cmd/kas/kasapp SentryHub
//
// Package kasapp is a generated GoMock package.
package kasapp

import (
	reflect "reflect"

	sentry "github.com/getsentry/sentry-go"
	gomock "go.uber.org/mock/gomock"
)

// MockSentryHub is a mock of SentryHub interface.
type MockSentryHub struct {
	ctrl     *gomock.Controller
	recorder *MockSentryHubMockRecorder
}

// MockSentryHubMockRecorder is the mock recorder for MockSentryHub.
type MockSentryHubMockRecorder struct {
	mock *MockSentryHub
}

// NewMockSentryHub creates a new mock instance.
func NewMockSentryHub(ctrl *gomock.Controller) *MockSentryHub {
	mock := &MockSentryHub{ctrl: ctrl}
	mock.recorder = &MockSentryHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSentryHub) EXPECT() *MockSentryHubMockRecorder {
	return m.recorder
}

// CaptureEvent mocks base method.
func (m *MockSentryHub) CaptureEvent(arg0 *sentry.Event) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureEvent", arg0)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// CaptureEvent indicates an expected call of CaptureEvent.
func (mr *MockSentryHubMockRecorder) CaptureEvent(arg0 any) *SentryHubCaptureEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureEvent", reflect.TypeOf((*MockSentryHub)(nil).CaptureEvent), arg0)
	return &SentryHubCaptureEventCall{Call: call}
}

// SentryHubCaptureEventCall wrap *gomock.Call
type SentryHubCaptureEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SentryHubCaptureEventCall) Return(arg0 *sentry.EventID) *SentryHubCaptureEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SentryHubCaptureEventCall) Do(f func(*sentry.Event) *sentry.EventID) *SentryHubCaptureEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SentryHubCaptureEventCall) DoAndReturn(f func(*sentry.Event) *sentry.EventID) *SentryHubCaptureEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

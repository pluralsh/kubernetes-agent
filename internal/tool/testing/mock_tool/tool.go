// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/tool/errz (interfaces: ErrReporter)
//
// Generated by this command:
//
//	mockgen -typed -destination tool.go -package mock_tool gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/tool/errz ErrReporter
//
// Package mock_tool is a generated GoMock package.
package mock_tool

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockErrReporter is a mock of ErrReporter interface.
type MockErrReporter struct {
	ctrl     *gomock.Controller
	recorder *MockErrReporterMockRecorder
}

// MockErrReporterMockRecorder is the mock recorder for MockErrReporter.
type MockErrReporterMockRecorder struct {
	mock *MockErrReporter
}

// NewMockErrReporter creates a new mock instance.
func NewMockErrReporter(ctrl *gomock.Controller) *MockErrReporter {
	mock := &MockErrReporter{ctrl: ctrl}
	mock.recorder = &MockErrReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrReporter) EXPECT() *MockErrReporterMockRecorder {
	return m.recorder
}

// HandleProcessingError mocks base method.
func (m *MockErrReporter) HandleProcessingError(arg0 context.Context, arg1 *zap.Logger, arg2 string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleProcessingError", arg0, arg1, arg2, arg3)
}

// HandleProcessingError indicates an expected call of HandleProcessingError.
func (mr *MockErrReporterMockRecorder) HandleProcessingError(arg0, arg1, arg2, arg3 any) *ErrReporterHandleProcessingErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProcessingError", reflect.TypeOf((*MockErrReporter)(nil).HandleProcessingError), arg0, arg1, arg2, arg3)
	return &ErrReporterHandleProcessingErrorCall{Call: call}
}

// ErrReporterHandleProcessingErrorCall wrap *gomock.Call
type ErrReporterHandleProcessingErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ErrReporterHandleProcessingErrorCall) Return() *ErrReporterHandleProcessingErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ErrReporterHandleProcessingErrorCall) Do(f func(context.Context, *zap.Logger, string, error)) *ErrReporterHandleProcessingErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ErrReporterHandleProcessingErrorCall) DoAndReturn(f func(context.Context, *zap.Logger, string, error)) *ErrReporterHandleProcessingErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
